<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.StyleCop.CSharp</name>
    </assembly>
    <members>
        <member name="T:Microsoft.StyleCop.CSharp.VariableModifiers">
            <summary>
            The various types of modifiers on a variable.
            </summary>
            <subcategory>other</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.VariableModifiers.None">
            <summary>
            No modifiers specified.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.VariableModifiers.Const">
            <summary>
            The 'const' modifier.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.VariableModifiers.Readonly">
            <summary>
            The 'readonly' modifier.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Whitespace">
            <summary>
            Describes a chunk of whitespace.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CsToken">
            <summary>
            Describes a single token within a C# document.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ICodePart">
            <summary>
            An interface implemented by types that describe a code part.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ICodePart.CodePartType">
            <summary>
            Gets the type of the code part.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ICodePart.Location">
            <summary>
            Gets the location of this code unit within the document.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ICodePart.LineNumber">
            <summary>
            Gets the line number that this code unit appears on in the document.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ICodePart.Parent">
            <summary>
            Gets the parent of this code part.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsToken.tokenType">
            <summary>
            The type of this token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsToken.tokenClass">
            <summary>
            THe class of the token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsToken.text">
            <summary>
            The token text.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsToken.location">
            <summary>
            The location of this token in the code document.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsToken.parent">
            <summary>
            The parent of the token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsToken.generated">
            <summary>
            True if the token is part of a generated code block.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsToken.#ctor(System.String,Microsoft.StyleCop.CSharp.CsTokenType,Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the CsToken class.
            </summary>
            <param name="text">The token string.</param>
            <param name="tokenType">The token type.</param>
            <param name="location">The location of the token within the code document.</param>
            <param name="parent">References the parent code part.</param>
            <param name="generated">True if the token is inside of a block of generated code.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsToken.#ctor(Microsoft.StyleCop.CSharp.CsTokenType,Microsoft.StyleCop.CSharp.CsTokenClass,Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the CsToken class.
            </summary>
            <param name="tokenType">The token type.</param>
            <param name="tokenClass">The token class.</param>
            <param name="location">The location of the token within the code document.</param>
            <param name="parent">References the parent code part.</param>
            <param name="generated">True if the token is inside of a block of generated code.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsToken.#ctor(System.String,Microsoft.StyleCop.CSharp.CsTokenType,Microsoft.StyleCop.CSharp.CsTokenClass,Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the CsToken class.
            </summary>
            <param name="text">The token string.</param>
            <param name="tokenType">The token type.</param>
            <param name="tokenClass">The token class.</param>
            <param name="location">The location of the token within the code document.</param>
            <param name="parent">References the parent code part.</param>
            <param name="generated">True if the token is inside of a block of generated code.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsToken.ToString">
            <summary>
            Returns the contents of the token as a string.
            </summary>
            <returns>Returns the token string.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsToken.JoinLocations(Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.CsToken)">
            <summary>
            Joins the locations of the two tokens.
            </summary>
            <param name="location1">The first location.</param>
            <param name="token2">The second token.</param>
            <returns>Returns the joined locations.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsToken.JoinLocations(Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken})">
            <summary>
            Joins the locations of the two tokens.
            </summary>
            <param name="location1">The first location.</param>
            <param name="token2">The second token.</param>
            <returns>Returns the joined locations.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsToken.JoinLocations(Microsoft.StyleCop.CSharp.CsToken,Microsoft.StyleCop.CSharp.CsToken)">
            <summary>
            Joins the locations of the two tokens.
            </summary>
            <param name="token1">The first token.</param>
            <param name="token2">The second token.</param>
            <returns>Returns the joined locations.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsToken.JoinLocations(Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken})">
            <summary>
            Joins the locations of the two tokens.
            </summary>
            <param name="token1">The first token.</param>
            <param name="token2">The second token.</param>
            <returns>Returns the joined locations.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsToken.CreateTextString">
            <summary>
            Creates the text string for the token.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsToken.Text">
            <summary>
            Gets or sets the token string.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsToken.Location">
            <summary>
            Gets the location of the token in the code document.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsToken.LineNumber">
            <summary>
            Gets the line number that the token appears on in the document.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsToken.CsTokenType">
            <summary>
            Gets the token type.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsToken.CsTokenClass">
            <summary>
            Gets the token class.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsToken.CodePartType">
            <summary>
            Gets the type of this code part.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsToken.Parent">
            <summary>
            Gets the parent of the token.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsToken.Generated">
            <summary>
            Gets a value indicating whether the token is within a block of generated code.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsToken.ParentRef">
            <summary>
            Gets or sets the parent reference.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Whitespace.tabCount">
            <summary>
            The number of tabs in this whitespace.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Whitespace.spaceCount">
            <summary>
            The number of spaces in this whitespace.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Whitespace.#ctor(System.String,Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the Whitespace class.
            </summary>
            <param name="text">The whitespace text.</param>
            <param name="location">The location of the whitespace in the code.</param>
            <param name="parent">The parent code unit.</param>
            <param name="generated">True if the token is inside of a block of generated code.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Whitespace.ToString">
            <summary>
            Gets the whitespace interpreted as a string.
            </summary>
            <returns>Returns the whitespace interpreted a string.</returns>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Whitespace.TabCount">
            <summary>
            Gets the number of tabs in the whitespace.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Whitespace.SpaceCount">
            <summary>
            Gets the number of spaces in the whitespace.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.TypeToken">
            <summary>
            Describes a type token in a code file.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ITokenContainer">
            <summary>
            Interface implemented by objects containing a list of child tokens.
            </summary>
            <subcategory>interface</subcategory>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ITokenContainer.Tokens">
            <summary>
            Gets the list of tokens in the container.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.TypeToken.childTokens">
            <summary>
            The list of child tokens within this token.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.TypeToken.#ctor(Microsoft.StyleCop.MasterList{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the TypeToken class.
            </summary>
            <param name="childTokens">The list of child tokens that form the token.</param>
            <param name="location">The location of the token in the code.</param>
            <param name="parent">The parent of the token.</param>
            <param name="generated">True if the token is inside of a block of generated code.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.TypeToken.#ctor(Microsoft.StyleCop.MasterList{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.CSharp.CsTokenClass,System.Boolean)">
            <summary>
            Initializes a new instance of the TypeToken class.
            </summary>
            <param name="childTokens">The list of child tokens that form the token.</param>
            <param name="location">The location of the token in the code.</param>
            <param name="parent">The parent of the token.</param>
            <param name="tokenClass">The token class.</param>
            <param name="generated">True if the token is inside of a block of generated code.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.TypeToken.CreateTextString">
            <summary>
            Creates a text string based on the child tokens in the token.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeToken.ChildTokens">
            <summary>
            Gets the list of child tokens within this token.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeToken.Microsoft#StyleCop#CSharp#ITokenContainer#Tokens">
            <summary>
            Gets the list of child tokens contained within this object.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.GenericTypeParameter">
            <summary>
            Describes parameter within a generic type token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.GenericTypeParameter.type">
            <summary>
            The generic type parameter.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.GenericTypeParameter.modifiers">
            <summary>
            Optional modifiers on the parameter;
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.GenericTypeParameter.#ctor(Microsoft.StyleCop.CSharp.TypeToken,Microsoft.StyleCop.CSharp.ParameterModifiers)">
            <summary>
            Initializes a new instance of the GenericTypeParameter class.
            </summary>
            <param name="type">The generic type parameter.</param>
            <param name="modifiers">Optional modifiers.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.GenericTypeParameter.Type">
            <summary>
            Gets the generic type parameter.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.GenericTypeParameter.Modifiers">
            <summary>
            Gets the optional modifiers on the parameter;
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CatchStatement">
            <summary>
            A catch-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Statement">
            <summary>
            A single statement within a code file or element.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CodeUnit">
            <summary>
            A basic code unit, either an expression or a statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.IWriteableCodeUnit">
            <summary>
            An interface implemented by all types that describe a unit of code.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ICodeUnit">
            <summary>
            An interface implemented by types that describe a unit of code.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ICodeUnit.Tokens">
            <summary>
            Gets the list of tokens within this code unit.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ICodeUnit.FriendlyTypeText">
            <summary>
            Gets the friendly name of the code unit type, which can be used in user output.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ICodeUnit.FriendlyPluralTypeText">
            <summary>
            Gets the friendly name of the code unit type as a plural noun, which can be used in user output.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ICodeUnit.Variables">
            <summary>
            Gets the list of variables and constants defined by this code unit.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ICodeUnit.ChildExpressions">
            <summary>
            Gets the collection of expressions beneath this code unit.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ICodeUnit.ChildStatements">
            <summary>
            Gets the collection of statements beneath this code unit.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.IWriteableCodeUnit.AddExpression(Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Adds a child expression.
            </summary>
            <param name="expression">The expression to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.IWriteableCodeUnit.AddExpressions(System.Collections.Generic.IEnumerable{Microsoft.StyleCop.CSharp.Expression})">
            <summary>
            Adds a range of child expressions.
            </summary>
            <param name="expressions">The expressions to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.IWriteableCodeUnit.AddStatement(Microsoft.StyleCop.CSharp.Statement)">
            <summary>
            Adds a child statement.
            </summary>
            <param name="statement">The statement to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.IWriteableCodeUnit.AddStatements(System.Collections.Generic.IEnumerable{Microsoft.StyleCop.CSharp.Statement})">
            <summary>
            Adds a range of child statements.
            </summary>
            <param name="statements">The statements to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.IWriteableCodeUnit.SetParent(Microsoft.StyleCop.CSharp.ICodePart)">
            <summary>
            Gets the parent of this code unit.
            </summary>
            <param name="parent">The parent of the code unit.</param>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnit.emptyExpressionArray">
            <summary>
            An empty array of expressions.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnit.emptyStatementArray">
            <summary>
            An empty array of statements.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnit.emptyTokenList">
            <summary>
            An empty master list of tokens.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnit.friendlyTypeName">
            <summary>
            The friendly name of the type.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnit.friendlyPluralTypeName">
            <summary>
            The friendly name of the type, in plural form.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnit.tokens">
            <summary>
            The token list for this code unit.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnit.location">
            <summary>
            The location of this expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnit.variables">
            <summary>
            The collection of variables defined by this code unit.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnit.expressions">
            <summary>
            The collection of expressions beneath this code unit.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnit.statements">
            <summary>
            The collection of statements beneath this code unit.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnit.parent">
            <summary>
            The parent of this code unit.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnit.codeUnitType">
            <summary>
            The type of the code unit.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnit.trimTokens">
            <summary>
            Indicates whether to automatically trim down the token list whenever it is set.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnit.#ctor(Microsoft.StyleCop.CSharp.CodePartType)">
            <summary>
            Initializes a new instance of the CodeUnit class.
            </summary>
            <param name="codeUnitType">The type of the code unit.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnit.#ctor(Microsoft.StyleCop.CSharp.CodePartType,Microsoft.StyleCop.CSharp.CsTokenList)">
            <summary>
            Initializes a new instance of the CodeUnit class.
            </summary>
            <param name="codeUnitType">The type of the code unit.</param>
            <param name="tokens">The list of tokens that form the code unit.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnit.Microsoft#StyleCop#CSharp#IWriteableCodeUnit#AddExpression(Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Adds a child expression.
            </summary>
            <param name="expression">The expression to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnit.Microsoft#StyleCop#CSharp#IWriteableCodeUnit#AddExpressions(System.Collections.Generic.IEnumerable{Microsoft.StyleCop.CSharp.Expression})">
            <summary>
            Adds a range of child expressions.
            </summary>
            <param name="items">The expressions to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnit.Microsoft#StyleCop#CSharp#IWriteableCodeUnit#AddStatement(Microsoft.StyleCop.CSharp.Statement)">
            <summary>
            Adds a child statement.
            </summary>
            <param name="statement">The statement to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnit.Microsoft#StyleCop#CSharp#IWriteableCodeUnit#AddStatements(System.Collections.Generic.IEnumerable{Microsoft.StyleCop.CSharp.Statement})">
            <summary>
            Adds a range of child statements.
            </summary>
            <param name="items">The statements to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnit.Microsoft#StyleCop#CSharp#IWriteableCodeUnit#SetParent(Microsoft.StyleCop.CSharp.ICodePart)">
            <summary>
            Sets the parent of this code unit.
            </summary>
            <param name="parentCodeUnit">The parent.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnit.AddExpression(Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Adds a child expression.
            </summary>
            <param name="expression">The expression to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnit.AddExpressions(System.Collections.Generic.IEnumerable{Microsoft.StyleCop.CSharp.Expression})">
            <summary>
            Adds a range of child expressions.
            </summary>
            <param name="items">The expressions to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnit.AddStatement(Microsoft.StyleCop.CSharp.Statement)">
            <summary>
            Adds a child statement.
            </summary>
            <param name="statement">The statement to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnit.AddStatements(System.Collections.Generic.IEnumerable{Microsoft.StyleCop.CSharp.Statement})">
            <summary>
            Adds a range of child statements.
            </summary>
            <param name="items">The statements to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnit.GetFriendlyTypeText(System.String)">
            <summary>
            Gets the friendly name of the code unit type, which can be used in user output.
            </summary>
            <param name="typeName">The name of the type.</param>
            <returns>Returns the friendly name text.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnit.GetFriendlyPluralTypeText(System.String)">
            <summary>
            Gets the friendly name of the code unit type as a plural noun, which can be used in user output.
            </summary>
            <param name="typeName">The name of the type.</param>
            <returns>Returns the plural friendly name text.</returns>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeUnit.Tokens">
            <summary>
            Gets the list of tokens within this code unit.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeUnit.Location">
            <summary>
            Gets the location of this code unit within the document.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeUnit.LineNumber">
            <summary>
            Gets the line number that this code unit appears on in the document.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeUnit.FriendlyTypeText">
            <summary>
            Gets the friendly name of the code unit type, which can be used in user output.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeUnit.FriendlyPluralTypeText">
            <summary>
            Gets the friendly name of the code unit type as a plural noun, which can be used in user output.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeUnit.CodePartType">
            <summary>
            Gets the type of the code unit.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeUnit.Variables">
            <summary>
            Gets the list of variables and constants defined by this code unit.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeUnit.ChildExpressions">
            <summary>
            Gets the collection of expressions beneath this code unit.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeUnit.ChildStatements">
            <summary>
            Gets the collection of statements beneath this code unit.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeUnit.Parent">
            <summary>
            Gets the parent of this code unit.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeUnit.TrimTokens">
            <summary>
            Gets or sets a value indicating whether to automatically trim down the 
            token list whenever it is set.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Statement.emptyStatementArray">
            <summary>
            An empty array of statements.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Statement.type">
            <summary>
            The type of the statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Statement.#ctor(Microsoft.StyleCop.CSharp.StatementType)">
            <summary>
            Initializes a new instance of the Statement class.
            </summary>
            <param name="type">The type of the statement.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Statement.#ctor(Microsoft.StyleCop.CSharp.StatementType,Microsoft.StyleCop.CSharp.CsTokenList)">
            <summary>
            Initializes a new instance of the Statement class.
            </summary>
            <param name="type">The type of the statement.</param>
            <param name="tokens">The list of tokens that form the statement.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Statement.WalkStatement``1(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{``0},``0)">
            <summary>
            Walks through the code units in the statement.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Statement.WalkStatement``1(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{``0},``0)">
            <summary>
            Walks through the code units in the statement.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Statement.WalkStatement``1(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},``0)">
            <summary>
            Walks through the code units in the statement.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Statement.WalkStatement(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{System.Object})">
            <summary>
            Walks through the code units in the statement.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Statement.WalkStatement(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{System.Object})">
            <summary>
            Walks through the code units in the statement.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Statement.WalkStatement(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object})">
            <summary>
            Walks through the code units in the statement.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Statement.Tokens">
            <summary>
            Gets the list of tokens that form the statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Statement.StatementType">
            <summary>
            Gets the type of the statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Statement.AttachedStatements">
            <summary>
            Gets the collection of statements which are attached to
            the end of this statement.
            </summary>
            <remarks>Examples of attached statements are the else-statements
            attached to an if-statement, or the catch statements attached to a try-statement.</remarks>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CatchStatement.tryStatement">
            <summary>
            The try-statement that this catch-statement is attached to.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CatchStatement.catchExpression">
            <summary>
            The inner expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CatchStatement.identifier">
            <summary>
            The exception variable identifier.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CatchStatement.classType">
            <summary>
            The class type of the exception being caught.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CatchStatement.embeddedStatement">
            <summary>
            The statement embedded within the catch-statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CatchStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.TryStatement,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.BlockStatement)">
            <summary>
            Initializes a new instance of the CatchStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="tryStatement">The try-statement that this catch-statement is attached to.</param>
            <param name="classExpression">The inner expression.</param>
            <param name="embeddedStatement">The statement embedded within the catch-statement.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CatchStatement.TryStatement">
            <summary>
            Gets the try-statement that this catch-statement is attached to.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CatchStatement.ClassType">
            <summary>
            Gets the class type of the exception being caught.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CatchStatement.Identifier">
            <summary>
            Gets the exception variable identifier.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CatchStatement.CatchExpression">
            <summary>
            Gets the expression within the catch statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CatchStatement.EmbeddedStatement">
            <summary>
            Gets the statement embedded within the catch-statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Strings.DocumentMustBeCsDocument">
            <summary>
              Looks up a localized string similar to The document must be of type CsDocument..
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Strings.DocumentRoot">
            <summary>
              Looks up a localized string similar to document root.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Strings.ElementMustBeInParentsDocument">
            <summary>
              Looks up a localized string similar to An element must be in the same document as its parent..
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Strings.EmptyElement">
            <summary>
              Looks up a localized string similar to empty element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Strings.InvalidNumberOfPasses">
            <summary>
              Looks up a localized string similar to Invalid number of passes..
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Strings.Root">
            <summary>
              Looks up a localized string similar to Root.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Strings.UnexpectedEndOfFile">
            <summary>
              Looks up a localized string similar to Unexpected end of file encountered..
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ParenthesizedExpression">
            <summary>
            An expression wrapped within parenthesis.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Expression">
            <summary>
            A single expression within a <see cref="T:Microsoft.StyleCop.CSharp.Statement"/>.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Expression.type">
            <summary>
            The type of the expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Expression.text">
            <summary>
            Stores a text representation of the expression. This is created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Expression.#ctor(Microsoft.StyleCop.CSharp.ExpressionType)">
            <summary>
            Initializes a new instance of the Expression class.
            </summary>
            <param name="type">The type of the expression.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Expression.#ctor(Microsoft.StyleCop.CSharp.ExpressionType,Microsoft.StyleCop.CSharp.CsTokenList)">
            <summary>
            Initializes a new instance of the Expression class.
            </summary>
            <param name="type">The type of the expression.</param>
            <param name="tokens">The list of tokens that form the expression.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Expression.WalkExpression``1(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{``0},``0)">
            <summary>
            Walks through the code units in the expression.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Expression.WalkExpression``1(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{``0},``0)">
            <summary>
            Walks through the code units in the expression.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Expression.WalkExpression``1(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},``0)">
            <summary>
            Walks through the code units in the expression.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Expression.WalkExpression(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{System.Object})">
            <summary>
            Walks through the code units in the expression.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Expression.WalkExpression(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{System.Object})">
            <summary>
            Walks through the code units in the expression.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Expression.WalkExpression(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object})">
            <summary>
            Walks through the code units in the expression.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Expression.CreateTextString">
            <summary>
            Creates a text string based on the child tokens in the attribute.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Expression.ExpressionType">
            <summary>
            Gets the type of the expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Expression.Text">
            <summary>
            Gets a text representation of the expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ParenthesizedExpression.innerExpression">
            <summary>
            The expression within the parenthesis.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ParenthesizedExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the ParenthesizedExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="innerExpression">The expression within the parenthesis.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ParenthesizedExpression.InnerExpression">
            <summary>
            Gets the expression within the parenthesis.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Variable">
            <summary>
            Describes a field, variable or constant.
            </summary>
            <subcategory>other</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Variable.type">
            <summary>
            The variable type.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Variable.name">
            <summary>
            The variable name.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Variable.modifiers">
            <summary>
            The variable modifiers, if any.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Variable.location">
            <summary>
            The location of the variable.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Variable.generated">
            <summary>
            Indicates whether the variable is located within a block of generated code.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Variable.parent">
            <summary>
            The parent of the variable.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Variable.#ctor(Microsoft.StyleCop.CSharp.TypeToken,System.String,Microsoft.StyleCop.CSharp.VariableModifiers,Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the Variable class.
            </summary>
            <param name="type">The type of the variable.</param>
            <param name="name">The name of the variable.</param>
            <param name="modifiers">Modifers applied to this variable.</param>
            <param name="location">The location of the variable.</param>
            <param name="parent">The parent code part.</param>
            <param name="generated">Indicates whethre the variable is located within a block of generated code.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Variable.Name">
            <summary>
            Gets the variable name.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Variable.CodePartType">
            <summary>
            Gets the type of this code part.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Variable.Type">
            <summary>
            Gets the variable type.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Variable.LineNumber">
            <summary>
            Gets the line number on which this variable appears.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Variable.Modifiers">
            <summary>
            Gets the modifiers applied to this variable.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Variable.Location">
            <summary>
            Gets the location of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Variable.Generated">
            <summary>
            Gets a value indicating whether the variable is located within a block of generated code.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Variable.Parent">
            <summary>
            Gets the parent of the variable.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.OperatorSymbol">
            <summary>
            Describes an operator symbol.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorSymbol.category">
            <summary>
            The category of the operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorSymbol.symbolType">
            <summary>
            The specific symbol type.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.OperatorSymbol.#ctor(System.String,Microsoft.StyleCop.CSharp.OperatorCategory,Microsoft.StyleCop.CSharp.OperatorType,Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the OperatorSymbol class.
            </summary>
            <param name="text">The text of the operator symbol.</param>
            <param name="category">The category of the operator.</param>
            <param name="symbolType">The specific symbol type.</param>
            <param name="location">The location of the operator symbol in the code document.</param>
            <param name="parent">Reference to the parent code part.</param>
            <param name="generated">Indicates whether the operator lies within a block of generated code.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.OperatorSymbol.Category">
            <summary>
            Gets the category of the operator symbol.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.OperatorSymbol.SymbolType">
            <summary>
            Gets the specific symbol type.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.WhileStatement">
            <summary>
            A while-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.WhileStatement.conditionExpression">
            <summary>
            The expression within the while-statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.WhileStatement.embeddedStatement">
            <summary>
            The statement that is embedded within this while-statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.WhileStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the WhileStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="conditionExpression">The expression within the while-statement.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.WhileStatement.ConditionExpression">
            <summary>
            Gets the expression within the while-statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.WhileStatement.EmbeddedStatement">
            <summary>
            Gets the statement that is embedded within this while-statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.UsingStatement">
            <summary>
            A using-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UsingStatement.resource">
            <summary>
            The expression declared in the using-statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UsingStatement.embeddedStatement">
            <summary>
            The statement that is embedded within this using-statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.UsingStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the UsingStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="resource">The resource aquisition expression declared in the using statement.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.UsingStatement.Resource">
            <summary>
            Gets the resource aquisition expression assigned to the obtained resource.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.UsingStatement.EmbeddedStatement">
            <summary>
            Gets the statement that is embedded within this while-statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.QueryLetClause">
            <summary>
            Describes a let clause in a query expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.QueryClauseWithExpression">
            <summary>
            A base class for a query clause which contains an embedded expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.QueryClause">
            <summary>
            The base class for all query clauses.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryClause.type">
            <summary>
            The type of the query clause.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryClause.#ctor(Microsoft.StyleCop.CSharp.QueryClauseType,Microsoft.StyleCop.CSharp.CsTokenList)">
            <summary>
            Initializes a new instance of the QueryClause class.
            </summary>
            <param name="type">The type of the clause.</param>
            <param name="tokens">The list of tokens that form the clause.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryClause.WalkQueryClause``1(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{``0},``0)">
            <summary>
            Walks through the code units in the query clause.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryClause.WalkQueryClause``1(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{``0},``0)">
            <summary>
            Walks through the code units in the query clause.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryClause.WalkQueryClause``1(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},``0)">
            <summary>
            Walks through the code units in the query clause.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryClause.WalkQueryClause(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{System.Object})">
            <summary>
            Walks through the code units in the query clause.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryClause.WalkQueryClause(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{System.Object})">
            <summary>
            Walks through the code units in the query clause.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryClause.WalkQueryClause(Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object})">
            <summary>
            Walks through the code units in the query clause.
            </summary>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryClause.QueryClauseType">
            <summary>
            Gets the type of the query clause.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryClause.ParentQueryClause">
            <summary>
            Gets the query clause that contains this clause, if there is one.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryClauseWithExpression.expression">
            <summary>
            The range expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryClauseWithExpression.#ctor(Microsoft.StyleCop.CSharp.QueryClauseType,Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the QueryClauseWithExpression class.
            </summary>
            <param name="type">The type of the query clause.</param>
            <param name="tokens">The list of tokens that form the clause.</param>
            <param name="expression">The range expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryClauseWithExpression.Expression">
            <summary>
            Gets the range expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryLetClause.rangeVariable">
            <summary>
            The variable that ranges over the values in the query result.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryLetClause.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Variable,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the QueryLetClause class.
            </summary>
            <param name="tokens">The list of tokens that form the clause.</param>
            <param name="rangeVariable">The variable that ranges over the values in the query result.</param>
            <param name="expression">The range expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryLetClause.RangeVariable">
            <summary>
            Gets the variable that ranges over the values in the query result.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.QueryGroupClause">
            <summary>
            Describes a group clause in a query expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryGroupClause.groupByExpression">
            <summary>
            The expression to group by.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryGroupClause.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the QueryGroupClause class.
            </summary>
            <param name="tokens">The list of tokens that form the clause.</param>
            <param name="expression">The expression.</param>
            <param name="groupByExpression">The group by expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryGroupClause.GroupByExpression">
            <summary>
            Gets the expression to group by.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Field">
            <summary>
            Describes a field within a class or struct.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CsElement">
            <summary>
            Describes a single element in a C# code file.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.emptyElementArray">
            <summary>
            An empty array of elements.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.elements">
            <summary>
            The collection of child elements of this element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.header">
            <summary>
            The Xml header of the element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.attributes">
            <summary>
            The list of attributes attached to the element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.type">
            <summary>
            The element type.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.declaration">
            <summary>
            The element declaration.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.actualAccess">
            <summary>
            The actual access of this item, considering the access of its parents.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.document">
            <summary>
            The document that owns this element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.name">
            <summary>
            The name of the element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.fullNamespaceName">
            <summary>
            The full namespace name of this element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.fullyQualifiedName">
            <summary>
            The fully qualified name of this element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.fullyQualifiedBase">
            <summary>
            The fully qualified base name of this element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.unsafeCode">
            <summary>
            Indicates whether this element is unsafe.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.generated">
            <summary>
            Indicates whether this element resides within a block of generated code.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.violations">
            <summary>
            The list of violations in this element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsElement.analyzerTag">
            <summary>
            A private tag which can be used by the current analyzer.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsElement.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.ElementType,System.String,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CsElement class.
            </summary>
            <param name="document">The document that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="type">The element type.</param>
            <param name="name">The name of this element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="unsafeCode">Indicates whether the element is unsafe.</param>
            <param name="generated">Indicates whether the element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsElement.ClearAnalyzerTags">
            <summary>
            Clears the analyzer tags for this element.
            </summary>
            <remarks>This method should only be called by the StyleCop framework.</remarks>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsElement.WalkElement``1(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{``0},``0)">
            <summary>
            Walks through the code units in the element.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsElement.WalkElement``1(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{``0},``0)">
            <summary>
            Walks through the code units in the element.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsElement.WalkElement``1(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},``0)">
            <summary>
            Walks through the code units in the element.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsElement.WalkElement``1(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{``0},``0)">
            <summary>
            Walks through the code units in the element.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsElement.WalkElement(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{System.Object})">
            <summary>
            Walks through the code units in the element.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsElement.WalkElement(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{System.Object})">
            <summary>
            Walks through the code units in the element.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsElement.WalkElement(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object})">
            <summary>
            Walks through the code units in the element.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsElement.WalkElement(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{System.Object})">
            <summary>
            Walks through the code units in the element.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsElement.AddViolation(Microsoft.StyleCop.Violation)">
            <summary>
            Adds one violation to this element.
            </summary>
            <param name="violation">The violation to add.</param>
            <returns>Returns false if there is already an identical violation in the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsElement.Initialize">
            <summary>
            Initializes the element.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsElement.AddElement(Microsoft.StyleCop.CSharp.CsElement)">
            <summary>
            Adds a child element to this element.
            </summary>
            <param name="element">The child element to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsElement.MergeAccess(Microsoft.StyleCop.CSharp.AccessModifierType)">
            <summary>
            Merges the access of this element with the access of its parent to determine
            the actual visibility of this item outside of the class.
            </summary>
            <param name="parentAccess">The parent's actual access type.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.FullyQualifiedName">
            <summary>
            Gets the fully qualified name of the element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.ChildCodeElements">
            <summary>
            Gets the collection of child elements beneath this element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.ElementTokens">
            <summary>
            Gets the collection of tokens in the element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.Document">
            <summary>
            Gets the document that contains this element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.ChildElements">
            <summary>
            Gets the collection of child elements one level under this element, if any.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.Header">
            <summary>
            Gets the Xml header for the element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.Attributes">
            <summary>
            Gets the list of attributes attached to the element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.Declaration">
            <summary>
            Gets the element declaration.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.ElementType">
            <summary>
            Gets the type of the element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.Name">
            <summary>
            Gets the name of the element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.FullNamespaceName">
            <summary>
            Gets the full name of the element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.AccessModifier">
            <summary>
            Gets the element's access modifier.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.ActualAccess">
            <summary>
            Gets the actual visibility of this element outside of the current class, taking into account the
            access of the element's parent.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.Unsafe">
            <summary>
            Gets a value indicating whether the element resides within a block of unsafe code,
            or whether the element declares itself as unsafe.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.Violations">
            <summary>
            Gets the violations found in this element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.AnalyzerTag">
            <summary>
            Gets or sets the analyzer tag.
            </summary>
            <remarks>A StyleCop rules analyzer can temporarily store and retrieve a value in this property. This value will be lost once 
            the rules analyzer has completed its analysis of the document containing this code element.</remarks>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.Generated">
            <summary>
            Gets a value indicating whether the element resides within a block of generated code.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsElement.QualifiedName">
            <summary>
            Gets or sets the fully qualified name of the element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Field.type">
            <summary>
            The type of the field.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Field.isConst">
            <summary>
            Indicates whether the item is declared const.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Field.isReadOnly">
            <summary>
            Indicates whether the item is declared readonly.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Field.declaration">
            <summary>
            The variable declaration statement within this field.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Field.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,Microsoft.StyleCop.CSharp.TypeToken,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Field class.
            </summary>
            <param name="document">The documenent that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="fieldType">The type of the field.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Field.Const">
            <summary>
            Gets a value indicating whether the field is declared const.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Field.Readonly">
            <summary>
            Gets a value indicating whether the field is declared readonly.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Field.FieldType">
            <summary>
            Gets the type of the field.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Field.VariableDeclarationStatement">
            <summary>
            Gets the variable declaration statement within this field.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Declaration">
            <summary>
            Decribes an element declaration.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Declaration.name">
            <summary>
            The item name.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Declaration.tokens">
            <summary>
            The list of tokens that make up the declaration.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Declaration.elementType">
            <summary>
            The item's element type.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Declaration.accessModifierType">
            <summary>
            The item's access type.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Declaration.modifiers">
            <summary>
            The list of modifiers in the declaration.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Declaration.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,System.String,Microsoft.StyleCop.CSharp.ElementType,Microsoft.StyleCop.CSharp.AccessModifierType)">
            <summary>
            Initializes a new instance of the Declaration class.
            </summary>
            <param name="tokens">The array of tokens that make up the declaration.</param>
            <param name="name">The name of the element.</param>
            <param name="elementType">The type of the element.</param>
            <param name="accessModifierType">The access type of the element.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Declaration.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,System.String,Microsoft.StyleCop.CSharp.ElementType,Microsoft.StyleCop.CSharp.AccessModifierType,System.Collections.Generic.Dictionary{Microsoft.StyleCop.CSharp.CsTokenType,Microsoft.StyleCop.CSharp.CsToken})">
            <summary>
            Initializes a new instance of the Declaration class.
            </summary>
            <param name="tokens">The array of tokens that make up the declaration.</param>
            <param name="name">The name of the element.</param>
            <param name="elementType">The type of the element.</param>
            <param name="accessModifierType">The access type of the element.</param>
            <param name="modifiers">The list of modifier keywords in the declaration.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Declaration.ContainsModifier(Microsoft.StyleCop.CSharp.CsTokenType[])">
            <summary>
            Indicates whether the declaration contains one of the given modifiers.
            </summary>
            <param name="types">The modifier types to check for.</param>
            <returns>Returns true if the declaration contains at least one
            of the given modifiers.</returns>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Declaration.AccessModifier">
            <summary>
            Gets a value indicating whether the element has an access modifier.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Declaration.Name">
            <summary>
            Gets the name of the element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Declaration.AccessModifierType">
            <summary>
            Gets the access modifier type for the element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Declaration.ElementType">
            <summary>
            Gets the element type.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Declaration.Tokens">
            <summary>
            Gets the list of tokens contained within the declaration.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Attribute">
            <summary>
            Describes an attribute declared on an element.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Attribute.childTokens">
            <summary>
            The list of child tokens within this attribute.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Attribute.element">
            <summary>
            The element that this attribute is attached to.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Attribute.attributeExpressions">
            <summary>
            Gets the list of attribute expressions within this attribute.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Attribute.#ctor(Microsoft.StyleCop.MasterList{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Collections.Generic.IEnumerable{Microsoft.StyleCop.CSharp.AttributeExpression},System.Boolean)">
            <summary>
            Initializes a new instance of the Attribute class.
            </summary>
            <param name="childTokens">The list of child tokens for the attribute.</param>
            <param name="location">The location of the attribute.</param>
            <param name="parent">The parent of the attribute.</param>
            <param name="attributeExpressions">The list of attribute expressions within this attribute.</param>
            <param name="generated">Indicates whether the attribute resides within a block of generated code.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Attribute.CreateTextString">
            <summary>
            Creates a text string based on the child tokens in the attribute.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Attribute.ChildTokens">
            <summary>
            Gets the list of child tokens within this attribute.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Attribute.AttributeExpressions">
            <summary>
            Gets the list of attribute expressions within this attribute.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Attribute.Element">
            <summary>
            Gets the element that this attribute is attached to, if any.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Attribute.Microsoft#StyleCop#CSharp#ITokenContainer#Tokens">
            <summary>
            Gets the list of child tokens contained within this object.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.SwitchDefaultStatement">
            <summary>
            A default-statement within a switch-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.SwitchDefaultStatement.#ctor">
            <summary>
            Initializes a new instance of the SwitchDefaultStatement class.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.GotoStatement">
            <summary>
            A goto-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.GotoStatement.identifier">
            <summary>
            The identifier of the label to jump to.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.GotoStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the GotoStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="identifier">The identifier of the label to jump to.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.GotoStatement.Identifier">
            <summary>
            Gets the identifier of the label to jump to.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ContinueStatement">
            <summary>
            A continue-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ContinueStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList)">
            <summary>
            Initializes a new instance of the ContinueStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.TypeofExpression">
            <summary>
            An expression representing a typeof operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.TypeofExpression.type">
            <summary>
            The type literal to get the type of.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.TypeofExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.LiteralExpression)">
            <summary>
            Initializes a new instance of the TypeofExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="type">The type literal to get the type of.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeofExpression.Type">
            <summary>
            Gets the type literal to get the type of.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.LogicalExpression">
            <summary>
            An expression representing a logical operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.LogicalExpression.operatorType">
            <summary>
            The type of operation being performed.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.LogicalExpression.leftHandSide">
            <summary>
            The left hand size of the expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.LogicalExpression.rightHandSide">
            <summary>
            The right hand size of the expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.LogicalExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.LogicalExpression.Operator,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the LogicalExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="operatorType">The type of opertion being performed.</param>
            <param name="leftHandSide">The left hand side of the expression.</param>
            <param name="rightHandSide">The right hand side of the expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.LogicalExpression.OperatorType">
            <summary>
            Gets the type of operation being performed.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.LogicalExpression.LeftHandSide">
            <summary>
            Gets the left hand side of the expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.LogicalExpression.RightHandSide">
            <summary>
            Gets the right hand side of the expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.LogicalExpression.Operator">
            <summary>
            The various logical operator types.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.LogicalExpression.Operator.And">
            <summary>
            The % operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.LogicalExpression.Operator.Or">
            <summary>
            The | operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.LogicalExpression.Operator.Xor">
            <summary>
            The ^ operator.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ElementType">
            <summary>
            The various types of elements in a C# code file.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.File">
            <summary>
            A code file.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Root">
            <summary>
            The root of a document.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.ExternAliasDirective">
            <summary>
            An extern alias directive.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.UsingDirective">
            <summary>
            A using directive.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Namespace">
            <summary>
            A namespace element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Field">
            <summary>
            A field element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Constructor">
            <summary>
            A constructor element. 
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Destructor">
            <summary>
            A destructor element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Delegate">
            <summary>
            A delegate element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Event">
            <summary>
            An event element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Enum">
            <summary>
            An enum element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Interface">
            <summary>
            An interface element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Property">
            <summary>
            A property element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Accessor">
            <summary>
            An accessor inside of a property, indexer, or event.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Indexer">
            <summary>
            An indexer element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Method">
            <summary>
            A method element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Struct">
            <summary>
            A struct element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.Class">
            <summary>
            A class element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.EnumItem">
            <summary>
            An item in an enumeration.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.ConstructorInitializer">
            <summary>
            The initialization code within a constructor's declaration.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElementType.EmptyElement">
            <summary>
            An element consisting only of a single semicolon.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.LockStatement">
            <summary>
            A lock-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.LockStatement.lockedExpression">
            <summary>
            The object to lock.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.LockStatement.embeddedStatement">
            <summary>
            The statement that is embedded within this lock-statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.LockStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the LockStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="lockedExpression">The item to lock.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.LockStatement.LockedExpression">
            <summary>
            Gets the item to lock.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.LockStatement.EmbeddedStatement">
            <summary>
            Gets the statement that is embedded within this lock-statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.AccessModifierType">
            <summary>
            The various access modifer types for code elements.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AccessModifierType.Public">
            <summary>
            A publicly exposed element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AccessModifierType.Internal">
            <summary>
            An internally exposed element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AccessModifierType.ProtectedInternal">
            <summary>
            A protected and internally exposed element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AccessModifierType.Protected">
            <summary>
            A protected element, exposed only to deriving classes.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AccessModifierType.Private">
            <summary>
            A private, unexposed element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AccessModifierType.ProtectedAndInternal">
            <summary>
            A protected element that is inside of an internal element.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ForStatement">
            <summary>
            A for-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ForStatement.initializers">
            <summary>
            The variables initialized in the for-statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ForStatement.condition">
            <summary>
            The condition checked before each loop through the for-statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ForStatement.iterators">
            <summary>
            The statements called at the end of each loop through the for-statement,
            used to advance the enumerator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ForStatement.embeddedStatement">
            <summary>
            The statement that is embedded within this for-statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ForStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Expression},Microsoft.StyleCop.CSharp.Expression,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Expression})">
            <summary>
            Initializes a new instance of the ForStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="initializers">The variables declared in the for-statement declaration.</param>
            <param name="condition">The condition expression.</param>
            <param name="iterators">The iterator expressions.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ForStatement.Initializers">
            <summary>
            Gets the variables declared in the for-statement declaration.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ForStatement.Condition">
            <summary>
            Gets the condition checked before each loop through the for-statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ForStatement.Iterators">
            <summary>
            Gets the expressions called at the end of each loop through the for-statement,
            used to advance the enumerator.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ForStatement.EmbeddedStatement">
            <summary>
            Gets the statement that is embedded within this for-statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.FinallyStatement">
            <summary>
            A finally-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.FinallyStatement.tryStatement">
            <summary>
            The try-statement that this finally-statement is attached to.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.FinallyStatement.embeddedStatement">
            <summary>
            The statement embedded within the catch-statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.FinallyStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.TryStatement,Microsoft.StyleCop.CSharp.BlockStatement)">
            <summary>
            Initializes a new instance of the FinallyStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="tryStatement">The try-statement that this finally-statement is embedded to.</param>
            <param name="embeddedStatement">The statement embedded within the finally-statement.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.FinallyStatement.TryStatement">
            <summary>
            Gets the try-statement that this finally-statement is attached to.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.FinallyStatement.EmbeddedStatement">
            <summary>
            Gets the statement embedded within the finally-statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ExpressionStatement">
            <summary>
            A statement containing a single expression.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionStatement.expression">
            <summary>
            The expression within this statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ExpressionStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the ExpressionStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="expression">The expression within this statement.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ExpressionStatement.Expression">
            <summary>
            Gets the expression within this statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.SymbolType">
            <summary>
            The various symbol types from a C# document.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.OpenParenthesis">
            <summary>
            Open parenthesis: '('.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.CloseParenthesis">
            <summary>
            Close parenthesis: ')'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.OpenCurlyBracket">
            <summary>
            Open Curly bracket: '{'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.CloseCurlyBracket">
            <summary>
            Close Curly bracket: '}'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.OpenSquareBracket">
            <summary>
            Open square bracket: '['.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.CloseSquareBracket">
            <summary>
            Close square bracket: ']'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Equals">
            <summary>
            An equals sign: '='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.ConditionalEquals">
            <summary>
            A conditional equals symbol: '=='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Plus">
            <summary>
            A plus sign: '+'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.PlusEquals">
            <summary>
            A plus equals symbol: '+='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Minus">
            <summary>
            A minus sign: '-'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.MinusEquals">
            <summary>
            A minus equals symbol: '-='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Multiplication">
            <summary>
            A multiplication sign: '*'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.MultiplicationEquals">
            <summary>
            A times equals symbol: '*='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Division">
            <summary>
            A division sign: '/'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.DivisionEquals">
            <summary>
            A divide equals symbol: '/='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.LessThan">
            <summary>
            A less-than sign.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.LessThanOrEquals">
            <summary>
            A less than or equals sign.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.LeftShift">
            <summary>
            A left-shift symbol.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.LeftShiftEquals">
            <summary>
            A left-shift equals sign.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.GreaterThan">
            <summary>
            A greater-than sign.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.GreaterThanOrEquals">
            <summary>
            A greater than or equals sign.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.RightShift">
            <summary>
            A right-shift symbol.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.RightShiftEquals">
            <summary>
            A right-shift equals sign.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Increment">
            <summary>
            An increment symbol: '++'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Decrement">
            <summary>
            A decrement symbol: '--'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.LogicalAnd">
            <summary>
            A logical AND symbol.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.AndEquals">
            <summary>
            An AND equals symbol.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.ConditionalAnd">
            <summary>
            A conditional AND symbol.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.LogicalOr">
            <summary>
            A logical OR symbol: '|'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.OrEquals">
            <summary>
            An OR equals symbol: '|='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.ConditionalOr">
            <summary>
            A conditional OR symbol: '||'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.LogicalXor">
            <summary>
            A logical XOR symbol: '^'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.XorEquals">
            <summary>
            An XOR equals symbol: '^='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Not">
            <summary>
            A NOT symbol: '!'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.NotEquals">
            <summary>
            A NOT equals symbol: '!='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Mod">
            <summary>
            A MOD symbol: '%'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.ModEquals">
            <summary>
            A MOD equals symbol: '%='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Dot">
            <summary>
            A dot: '.'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Pointer">
            <summary>
            A pointer symbol: '->'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Colon">
            <summary>
            A colon: ':'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.QualifiedAlias">
            <summary>
            A qualified alias symbol: '::'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.QuestionMark">
            <summary>
            A question mark: '?'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.NullCoalescingSymbol">
            <summary>
            A null coalescing symbol: '??'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Comma">
            <summary>
            A comma: ','.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Semicolon">
            <summary>
            A semicolon ending a line of code: ';'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Tilde">
            <summary>
            A tilde symbol: '~'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Lambda">
            <summary>
            A lambda expression symbol: =>
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Abstract">
            <summary>
            The keyword 'abstract'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.As">
            <summary>
            The keyword 'as'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Base">
            <summary>
            The keyword 'base'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Break">
            <summary>
            The keyword 'break'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Case">
            <summary>
            The keyword 'case'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Catch">
            <summary>
            The keyword 'catch'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Checked">
            <summary>
            The keyword 'checked'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Class">
            <summary>
            The keyword 'class'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Const">
            <summary>
            The keyword 'const'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Continue">
            <summary>
            The keyword 'continue'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Default">
            <summary>
            The keyword 'default'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Delegate">
            <summary>
            The keyword 'delegate'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Do">
            <summary>
            The keyword 'do'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Else">
            <summary>
            The keyword 'else'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Enum">
            <summary>
            The keyword 'enum'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Event">
            <summary>
            The keyword 'event'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Explicit">
            <summary>
            The keyword 'explicit'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Extern">
            <summary>
            The keyword 'extern'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.False">
            <summary>
            The keyword 'false'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Finally">
            <summary>
            The keyword 'finally'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Fixed">
            <summary>
            The keyword 'fixed'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.For">
            <summary>
            The keyword 'for'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Foreach">
            <summary>
            The keyword 'foreach'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Goto">
            <summary>
            The keyword 'goto'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.If">
            <summary>
            The keyword 'if'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Implicit">
            <summary>
            The keyword 'implicit'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.In">
            <summary>
            The keyword 'in'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Interface">
            <summary>
            The keyword 'interface'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Internal">
            <summary>
            The keyword 'internal'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Is">
            <summary>
            The keyword 'is'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Lock">
            <summary>
            The keyword 'lock'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Namespace">
            <summary>
            The keyword 'namespace'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.New">
            <summary>
            The keyword 'new'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Null">
            <summary>
            The keyword 'null'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Operator">
            <summary>
            The keyword 'operator'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Out">
            <summary>
            The keyword 'out'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Override">
            <summary>
            The keyword 'override'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Params">
            <summary>
            The keyword 'params'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Private">
            <summary>
            The keyword 'private'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Protected">
            <summary>
            The keyword 'protected'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Public">
            <summary>
            The keyword 'public'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Readonly">
            <summary>
            The keyword 'readonly'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Ref">
            <summary>
            The keyword 'ref'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Return">
            <summary>
            The keyword 'return'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Sealed">
            <summary>
            The keyword 'sealed'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Sizeof">
            <summary>
            The keyword 'sizeof'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Stackalloc">
            <summary>
            The keyword 'stackalloc'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Static">
            <summary>
            The keyword 'static'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Struct">
            <summary>
            The keyword 'struct'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Switch">
            <summary>
            The keyword 'switch'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.This">
            <summary>
            The keyword 'this'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Throw">
            <summary>
            The keyword 'throw'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.True">
            <summary>
            The keyword 'true'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Try">
            <summary>
            The keyword 'try'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Typeof">
            <summary>
            The keyword 'typeof'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Unchecked">
            <summary>
            The keyword 'unchecked'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Unsafe">
            <summary>
            The keyword 'unsafe'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Using">
            <summary>
            The keyword 'using'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Virtual">
            <summary>
            The keyword 'virtual'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Volatile">
            <summary>
            The keyword 'volatile'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.While">
            <summary>
            The keyword 'while'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Other">
            <summary>
            An unknown token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.WhiteSpace">
            <summary>
            A group of whitespace.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.EndOfLine">
            <summary>
            An end-of-line character.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.String">
            <summary>
            A string constant.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Number">
            <summary>
            A number constant.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.SingleLineComment">
            <summary>
            A single-line comment.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.MultiLineComment">
            <summary>
            A multi-line comment.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.PreprocessorDirective">
            <summary>
            A preprocessor line.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.Attribute">
            <summary>
            An element attribute.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolType.XmlHeaderLine">
            <summary>
            A line within an Xml header.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.MethodInvocationExpression">
            <summary>
            An expression representing a method invocation operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.MethodInvocationExpression.name">
            <summary>
            The method name.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.MethodInvocationExpression.arguments">
            <summary>
            The arguments passed to the method.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.MethodInvocationExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression,System.Collections.Generic.IList{Microsoft.StyleCop.CSharp.Argument})">
            <summary>
            Initializes a new instance of the MethodInvocationExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="name">The name of the method.</param>
            <param name="arguments">The arguments passed to the method.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.MethodInvocationExpression.Name">
            <summary>
            Gets the name of the method.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.MethodInvocationExpression.Arguments">
            <summary>
            Gets the list of arguments passed to the method.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.IncrementExpression">
            <summary>
            An expression representing an increment operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.IncrementExpression.incrementType">
            <summary>
            The type of increment being performed.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.IncrementExpression.value">
            <summary>
            The value being incremented.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.IncrementExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.IncrementExpression.IncrementType)">
            <summary>
            Initializes a new instance of the IncrementExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="value">The value being incremented.</param>
            <param name="incrementType">The type of increment being performed.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.IncrementExpression.Type">
            <summary>
            Gets the type of increment being performed.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.IncrementExpression.Value">
            <summary>
            Gets the value being incremented.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.IncrementExpression.IncrementType">
            <summary>
            The various types of increment operations.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.IncrementExpression.IncrementType.Prefix">
            <summary>
            A prefix increment: ++x.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.IncrementExpression.IncrementType.Postfix">
            <summary>
            A postfix increment: x++.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Reference`1">
            <summary>
            Provides a reference to another object.
            </summary>
            <typeparam name="T">The type of object to reference.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Reference`1.#ctor">
            <summary>
            Initializes a new instance of the Reference class.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Reference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the Reference class.
            </summary>
            <param name="target">The referenced target.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Reference`1.Target">
            <summary>
            Gets or sets the referenced target.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CodeUnitCollection`1">
            <summary>
            A read-only collection of items.
            </summary>
            <typeparam name="T">The type of code unit stored in the collection.</typeparam>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.items">
            <summary>
            The internal collection of items.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.parent">
            <summary>
            The parent of all items in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.#ctor(Microsoft.StyleCop.CSharp.ICodePart)">
            <summary>
            Initializes a new instance of the CodeUnitCollection class.
            </summary>
            <param name="parent">The parent of all items in the collection.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.Contains(`0)">
            <summary>
            Determines whether the given item is contained within the collection.
            </summary>
            <param name="item">The item to find.</param>
            <returns>Returns true if the item is contained within the collection.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection to the given array.
            </summary>
            <param name="array">The array to copy into.</param>
            <param name="arrayIndex">The index in the array at which to begin copying.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the collection.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>Returns true if the item was removed.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the collection.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add to the collection.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the collection.
            </summary>
            <param name="codeUnits">The range of items to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.Remove(`0)">
            <summary>
            Removes the given item from the list.
            </summary>
            <param name="item">The item to remove from the list.</param>
            <returns>Return true if the item was removed from the list.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.Clear">
            <summary>
            Clears the contents of the list.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.InitializeItem(`0)">
            <summary>
            Initializes an item when it is added to the list.
            </summary>
            <param name="item">The item to initialize.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.UninitializeItem(`0)">
            <summary>
            Uninitializes an item when it is removed from the list.
            </summary>
            <param name="item">The item to uninitialize.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.Parent">
            <summary>
            Gets the parent of all items in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeUnitCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.QuerySelectClause">
            <summary>
            Describes a select clause in a query expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QuerySelectClause.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the QuerySelectClause class.
            </summary>
            <param name="tokens">The list of tokens that form the clause.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.QueryJoinClause">
            <summary>
            Describes a join clause in a query expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryJoinClause.rangeVariable">
            <summary>
            The variable that ranges over the values in the query result.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryJoinClause.intoVariable">
            <summary>
            The optional variable that the result is placed into.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryJoinClause.inExpression">
            <summary>
            The expression after the 'in' keyword.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryJoinClause.onKeyExpression">
            <summary>
            The expression after the 'on' keyword.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryJoinClause.equalsKeyExpression">
            <summary>
            The expression after the 'equals' keyword.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryJoinClause.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Variable,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Variable)">
            <summary>
            Initializes a new instance of the QueryJoinClause class.
            </summary>
            <param name="tokens">The list of tokens that form the clause.</param>
            <param name="rangeVariable">The variable that ranges over the values in the query result.</param>
            <param name="inExpression">The expression after the 'in' keyword.</param>
            <param name="onKeyExpression">The expression after the 'on' keyword.</param>
            <param name="equalsKeyExpression">The expression after the 'equals' keyword.</param>
            <param name="intoVariable">The optional variable that the result is placed into.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryJoinClause.RangeVariable">
            <summary>
            Gets the variable that ranges over the values in the query result.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryJoinClause.InExpression">
            <summary>
            Gets the expression after the 'in' keyword.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryJoinClause.OnKeyExpression">
            <summary>
            Gets the expression after the 'on' keyword.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryJoinClause.EqualsKeyExpression">
            <summary>
            Gets the expression after the 'equals' keyword.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryJoinClause.IntoVariable">
            <summary>
            Gets the optional variable that the result is placed into.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.QueryContinuationClause">
            <summary>
            Describes a continuation clause in a query expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryContinuationClause.variable">
            <summary>
            The continuation clause variable.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryContinuationClause.clauses">
            <summary>
            The list of clauses in the expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryContinuationClause.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Variable,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.QueryClause})">
            <summary>
            Initializes a new instance of the QueryContinuationClause class.
            </summary>
            <param name="tokens">The list of tokens that form the clause.</param>
            <param name="variable">The continuation clause variable.</param>
            <param name="clauses">The collection of clauses in the expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryContinuationClause.Variable">
            <summary>
            Gets the continuation clause variable.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryContinuationClause.ChildClauses">
            <summary>
            Gets the list of query clauses within this expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.EventDeclaratorExpression">
            <summary>
            A single event declarator within an event.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.EventDeclaratorExpression.identifier">
            <summary>
            The identifier of the event.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.EventDeclaratorExpression.initializer">
            <summary>
            The initialization expression for the event.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.EventDeclaratorExpression.parent">
            <summary>
            The parent event.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.EventDeclaratorExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.LiteralExpression,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the EventDeclaratorExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="identifier">The identifier name of the event.</param>
            <param name="initializer">The initialization expression for the event.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.EventDeclaratorExpression.Identifier">
            <summary>
            Gets the identifier name of the event.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.EventDeclaratorExpression.Initializer">
            <summary>
            Gets the initialization statement for the event.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.EventDeclaratorExpression.ParentEvent">
            <summary>
            Gets the parent event.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CollectionInitializerExpression">
            <summary>
            An expression representing a collection initializer.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CollectionInitializerExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,System.Collections.Generic.IEnumerable{Microsoft.StyleCop.CSharp.Expression})">
            <summary>
            Initializes a new instance of the CollectionInitializerExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="initializers">The list of variable initializers within the 
            array initializer expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CollectionInitializerExpression.Initializers">
            <summary>
            Gets the list of initializers within the expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause">
            <summary>
            Describes a type constraint clause within a C# file.
            </summary>
            <subcategory>other</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause.parentElement">
            <summary>
            The parent element that contains this constraint.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause.tokens">
            <summary>
            The token list for the constraint.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause.type">
            <summary>
            The type being constrainted.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause.constraints">
            <summary>
            The list of constraints on the type.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause.parent">
            <summary>
            The parent of the constraint clause.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.CsToken,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Initializes a new instance of the TypeParameterConstraintClause class.
            </summary>
            <param name="tokens">The list of tokens that form the constraint.</param>
            <param name="type">The type being constrainted.</param>
            <param name="constraints">The list of constraints on the type, if any.</param>
            <param name="parent">The parent of the constraint clause.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause.Tokens">
            <summary>
            Gets the list of tokens that form the constraint.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause.CodePartType">
            <summary>
            Gets the type of this code part.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause.Type">
            <summary>
            Gets the type being constrainted.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause.Constraints">
            <summary>
            Gets the list of constraints on the type, if any.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause.ParentElement">
            <summary>
            Gets the parent element that contains this type constraint.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause.Parent">
            <summary>
            Gets the parent of the constraint clause.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause.LineNumber">
            <summary>
            Gets the line number that the clause begins on.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeParameterConstraintClause.Location">
            <summary>
            Gets the location of the clause.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.UncheckedStatement">
            <summary>
            A unchecked-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UncheckedStatement.embeddedStatement">
            <summary>
            The statement embedded within this unchecked statement, if any.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.UncheckedStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.BlockStatement)">
            <summary>
            Initializes a new instance of the UncheckedStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="embeddedStatement">The block statement embedded within this unchecked statement, if any.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.UncheckedStatement.EmbeddedStatement">
            <summary>
            Gets the block statement embedded within this unchecked statement, if any.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.SwitchCaseStatement">
            <summary>
            A case-statement within a switch-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SwitchCaseStatement.identifier">
            <summary>
            The case label identifier.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.SwitchCaseStatement.#ctor(Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the SwitchCaseStatement class.
            </summary>
            <param name="identifier">The case label identifier.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.SwitchCaseStatement.Identifier">
            <summary>
            Gets the case label identifier.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.MemberAccessExpression">
            <summary>
            An expression representing a member access operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.MemberAccessExpression.operatorType">
            <summary>
            The type of operation being performed.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.MemberAccessExpression.leftHandSide">
            <summary>
            The expression on the left-hand side of the operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.MemberAccessExpression.rightHandSide">
            <summary>
            The member expression on the right hand side of the operator.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.MemberAccessExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.MemberAccessExpression.Operator,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.LiteralExpression)">
            <summary>
            Initializes a new instance of the MemberAccessExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="operatorType">The type of opertion being performed.</param>
            <param name="leftHandSide">The left side of the operation.</param>
            <param name="rightHandSide">The member being accessed.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.MemberAccessExpression.OperatorType">
            <summary>
            Gets the type of operation being performed.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.MemberAccessExpression.LeftHandSide">
            <summary>
            Gets the expression on the left-hand side of the operator.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.MemberAccessExpression.RightHandSide">
            <summary>
            Gets the member expression on the right-hand side of the operator.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.MemberAccessExpression.Operator">
            <summary>
            The various member access operation types.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.MemberAccessExpression.Operator.Pointer">
            <summary>
            The -> operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.MemberAccessExpression.Operator.Dot">
            <summary>
            The . operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.MemberAccessExpression.Operator.QualifiedAlias">
            <summary>
            The :: operator.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.AnonymousMethodExpression">
            <summary>
            An expression representing an anonymous method.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ExpressionWithParameters">
            <summary>
            An expression which defines a parameter list.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.IParameterContainer">
            <summary>
            Interface that must be implemented by statements containing a list of parameters.
            </summary>
            <subcategory>interface</subcategory>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.IParameterContainer.Parameters">
            <summary>
            Gets the list of parameters in the container.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionWithParameters.parameters">
            <summary>
            The parameters defines in the expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionWithParameters.readOnlyParameters">
            <summary>
            The parameters list as a read-only collection.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ExpressionWithParameters.#ctor(Microsoft.StyleCop.CSharp.ExpressionType)">
            <summary>
            Initializes a new instance of the ExpressionWithParameters class.
            </summary>
            <param name="type">The type of the expression.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ExpressionWithParameters.AddParameter(Microsoft.StyleCop.CSharp.Parameter)">
            <summary>
            Adds a parameter to the expression.
            </summary>
            <param name="parameter">The parameter to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ExpressionWithParameters.AddParameters(System.Collections.Generic.IEnumerable{Microsoft.StyleCop.CSharp.Parameter})">
            <summary>
            Adds a range of parameters to the expression.
            </summary>
            <param name="items">The parameters to add.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ExpressionWithParameters.Parameters">
            <summary>
            Gets the parameters passed to the expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.AnonymousMethodExpression.#ctor">
            <summary>
            Initializes a new instance of the AnonymousMethodExpression class.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ITypeConstraintContainer">
            <summary>
            Implemented by elements containing a list of type constraints.
            </summary>
            <subcategory>interface</subcategory>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ITypeConstraintContainer.TypeConstraints">
            <summary>
            Gets the list of type constraints in the container.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.AttributeExpression">
            <summary>
            An expression representing an element or assembly attribute.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AttributeExpression.target">
            <summary>
            The attribute target, if any.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AttributeExpression.initialization">
            <summary>
            The attribute initialization call.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.AttributeExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.LiteralExpression,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the AttributeExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="target">The attribute target, if any.</param>
            <param name="initialization">The attribute initialization call.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.AttributeExpression.Target">
            <summary>
            Gets the attribute target.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.AttributeExpression.Initialization">
            <summary>
            Gets the attribute initialization call expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.AttributeExpression.IsAssemblyAttribute">
            <summary>
            Gets a value indicating whether this is an assembly attribute.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CodeParser">
            <content>
            Contains code for parsing expressions within a C# code file.
            </content>
            <content>
            Contains code for parsing elements within a C# file.
            </content>
            <content>
            Contains code for parsing statements within a C# code file.
            </content>
            <summary>
            Parses a C# code file.
            </summary>
            <content>
            Contains code for parsing symbols within a C# code file.
            </content>
            <content>
            Contains code for parsing preprocessor directives within a C# file.
            </content>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.CheckPrecedence(Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence)">
            <summary>
            Compares the precendence of the previous expression with the precedence of the next expression,
            to determine which has the higher precedence value.
            </summary>
            <param name="previousPrecedence">The previous expression's precedence.</param>
            <param name="nextPrecedence">The next expression's precendence.</param>
            <returns>Returns true if the next expression has greater precedence than the next expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetOperatorPrecedence(Microsoft.StyleCop.CSharp.OperatorType)">
            <summary>
            Gets the precedence of the given opereator type.
            </summary>
            <param name="type">The operator type.</param>
            <returns>Returns the precendece of the type.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNextExpression(Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next expression from the file and returns it.
            </summary>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <param name="parentReference">Reference to the parent code part.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNextExpression(Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Reads the next expression from the file and returns it.
            </summary>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <param name="parentReference">Reference to the parent code part.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="allowVariableDeclaration">Indicates whether this expression can be a variable declaration expression.</param>
            <param name="typeExpression">Indicates whether only components of a type expression are allowed.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetExpressionExtension(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Given an expression, reads further to see if it is actually a sub-expression 
            within a larger expression.
            </summary>
            <param name="leftSide">The known expression which might have an extension.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <param name="parentReference">The parent code part.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="typeExpression">Indicates whether only components of a type expression are allowed.</param>
            <param name="allowVariableDeclaration">Indicates whether variable declaration expressions are allowed.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetOtherExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean)">
            <summary>
            Gets an expression that starts with an unknown word.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="allowVariableDeclaration">Indicates whether this expression can be a variable declaration expression.</param>
            <param name="unsafeCode">Indicates whether the expression resides within a block of unsafe code.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetLiteralExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads an expression starting with an unknown word.
            </summary>
            <param name="parentReference">The parent code part.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetMethodInvocationExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,System.Boolean)">
            <summary>
            Reads a method access expression.
            </summary>
            <param name="methodName">The name of the method being called.</param>
            <param name="previousPrecedence">The precedence of the previous expression.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetArrayAccessExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,System.Boolean)">
            <summary>
            Reads an array access expression.
            </summary>
            <param name="array">The array being accessed.</param>
            <param name="previousPrecedence">The precedence of the previous expression.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetMemberAccessExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,System.Boolean)">
            <summary>
            Reads a member access expression.
            </summary>
            <param name="leftSide">The left side of the expression.</param>
            <param name="previousPrecedence">The precedence of the previous expression.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetVariableDeclarationExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,System.Boolean)">
            <summary>
            Reads an expression beginning with two unknown words.
            </summary>
            <param name="type">The type of the variable.</param>
            <param name="previousPrecedence">The precedence of the previous expression.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetArrayInitializerExpression(System.Boolean)">
            <summary>
            Reads an array initializer expression.
            </summary>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetOpenParenthesisExpression(Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,System.Boolean)">
            <summary>
            Reads an expression beginning with an opening parenthesis.
            </summary>
            <param name="previousPrecedence">The precedence of the previous expression.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetCastExpression(System.Boolean)">
            <summary>
            Reads a cast expression.
            </summary>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetParenthesizedExpression(System.Boolean)">
            <summary>
            Reads an expression wrapped in parenthesis expression.
            </summary>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetArgumentList(Microsoft.StyleCop.CSharp.SymbolType,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the argument list for a method invocation expression.
            </summary>
            <param name="closingSymbol">The symbol that closes the argument list.</param>
            <param name="parentReference">The parent code part.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the list of arguments in the method invocation.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetAsExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads an as expression.
            </summary>
            <param name="leftHandSide">The expression on the left hand side of the operator.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetIsExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads an is expression.
            </summary>
            <param name="leftHandSide">The expression on the left hand side of the operator.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetPrimaryIncrementExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence)">
            <summary>
            Reads a primary increment expression.
            </summary>
            <param name="leftHandSide">The expression on the left hand side of the operator.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetPrimaryDecrementExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence)">
            <summary>
            Reads a primary decrement expression.
            </summary>
            <param name="leftHandSide">The expression on the left hand side of the operator.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetUnaryIncrementExpression(System.Boolean)">
            <summary>
            Reads a unary increment expression.
            </summary>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetUnaryDecrementExpression(System.Boolean)">
            <summary>
            Reads a unary decrement expression.
            </summary>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetUnaryExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads a unary expression.
            </summary>
            <param name="parentReference">The parent code part.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetConditionalExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,System.Boolean)">
            <summary>
            Reads a conditional expression.
            </summary>
            <param name="leftHandSide">The expression on the left hand side of the operator.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetArithmeticExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads an arithmetic expression.
            </summary>
            <param name="leftHandSide">The expression on the left hand side of the operator.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetAssignmentExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads an assignment expression.
            </summary>
            <param name="leftHandSide">The expression on the left hand side of the operator.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <param name="parentReference">The parent code part.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetRelationalExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads a relational expression.
            </summary>
            <param name="leftHandSide">The expression on the left hand side of the operator.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <param name="parentReference">The parent code part.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetLogicalExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads a logical expression.
            </summary>
            <param name="leftHandSide">The expression on the left hand side of the operator.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <param name="parentReference">The parent code part.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetConditionalLogicalExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads a conditional logical expression.
            </summary>
            <param name="leftHandSide">The expression on the left hand side of the operator.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <param name="parentReference">The parent code part.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNullCoalescingExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads a null coalescing expression.
            </summary>
            <param name="leftHandSide">The expression on the left hand side of the operator.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.PeekOperatorToken(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Reads an operator token.
            </summary>
            <param name="parentReference">The parent code part.</param>
            <param name="tokenParent">The parent of the token.</param>
            <returns>Returns the token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetOperatorRightHandExpression(Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads and returns the right-hand expression of an operator expression.
            </summary>
            <param name="precedence">The precendence of this operator expression.</param>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetCheckedExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads a checked expression from the code.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetUncheckedExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads an unchecked expression from the code.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNewAllocationExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads a new allocation expression from the code.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNewNonArrayTypeExpression(System.Boolean,Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Reads a new non-array type allocation expression from the code.
            </summary>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="firstTokenNode">The first token in the expression.</param>
            <param name="type">The type of the array.</param>
            <param name="expressionReference">A reference to the expression being created.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNewAnonymousTypeExpression(System.Boolean,Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Reads a new anonymous type allocation expression from the code.
            </summary>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="firstTokenNode">The first token in the expression.</param>
            <param name="expressionReference">A reference to the expression being created.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetAnonymousTypeInitializerExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads an anonymous type initializer expression from the code.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNewArrayTypeExpression(System.Boolean,Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Reads a new array allocation expression from the code.
            </summary>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="firstTokenNode">The first token in the expression.</param>
            <param name="type">The type of the array. This may be null for an implicitly typed array.</param>
            <param name="expressionReference">A reference to the expression being created.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.MovePastArrayBrackets(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Moves past all array brackets. This assumes that the brackets are part of a new array allocation.
            </summary>
            <param name="parentReference">The parent code unit.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetObjectOrCollectionInitializerExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Gets an object initializer or collection initializer expression.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetObjectInitializerExpression(System.Boolean)">
            <summary>
            Gets an object initializer expression.
            </summary>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetCollectionInitializerExpression(System.Boolean)">
            <summary>
            Gets a collection initializer expression.
            </summary>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetStackallocExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads a stackalloc expression from the code.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetSizeofExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads a sizeof expression from the code.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetTypeofExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads a typeof expression from the code.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetDefaultValueExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads a default value expression from the code.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetAnonymousMethodExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads an anonymous method from the code.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.IsLambdaExpression">
            <summary>
            Determines whether the next expression is a lambda expression.
            </summary>
            <returns>Returns true if the next expression is a lambda expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetLambdaExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads a lambda expression.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.IsQueryExpression(System.Boolean)">
            <summary>
            Determines whether the next expression is a query expression.
            </summary>
            <param name="unsafeCode">Indicates whether the code being parsed is unsafe.</param>
            <returns>Returns true if the next expression is a lambda expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetQueryExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads a query expression.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides 
            in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetQueryExpressionClauses(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Collections.Generic.List{Microsoft.StyleCop.CSharp.QueryClause},System.Collections.Generic.List{Microsoft.StyleCop.CSharp.Variable})">
            <summary>
            Gets the collection of query clauses.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides 
            in an unsafe code block.</param>
            <param name="clauses">The list in which to store the clauses.</param>
            <param name="variables">The list in which to store variables defined by the clauses.</param>
            <returns>Returns the list of this.tokens that make up the clauses.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetQueryContinuationClause(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Gets a query continuation clause.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides 
            in an unsafe code block.</param>
            <returns>Returns the query continuation clause.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetQueryFromClause(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Gets a query from clause.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides 
            in an unsafe code block.</param>
            <returns>Returns the query from clause.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetQueryLetClause(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Gets a query let clause.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides 
            in an unsafe code block.</param>
            <returns>Returns the query let clause.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetQueryWhereClause(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Gets a query where clause.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides 
            in an unsafe code block.</param>
            <returns>Returns the query where clause.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetQueryJoinClause(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Gets a query join clause.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides 
            in an unsafe code block.</param>
            <returns>Returns the query from clause.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetQueryOrderByClause(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Gets a query order-by clause.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides 
            in an unsafe code block.</param>
            <returns>Returns the query order-by clause.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetQuerySelectClause(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Gets a query select clause.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides 
            in an unsafe code block.</param>
            <returns>Returns the query select clause.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetQueryGroupClause(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Gets a query group clause.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides 
            in an unsafe code block.</param>
            <returns>Returns the query group clause.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetUnsafeTypeExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Reads an unsafe type expression.
            </summary>
            <param name="type">The type expression.</param>
            <param name="previousPrecedence">The precedence of the previous expression.</param>
            <param name="parentReference">The parent code unit.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetUnsafeAccessExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads an unsafe access expression.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.IsUnaryExpression">
            <summary>
            Checks whether the next expression can be a unary expression.
            </summary>
            <returns>Returns true if the next expression can be a unary expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.IsCastExpression(Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence,System.Boolean)">
            <summary>
            Checks whether the symbol manager is currently sitting on a cast expression.
            </summary>
            <param name="previousPrecedence">The precedence of the previous expression.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns true if the next expression is a cast.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.HasTypeSignature(System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Checks whether the symbol manager is currently sitting on an expression that looks like a type.
            </summary>
            <param name="startIndex">The first index of the expression.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="endIndex">Returns the last index of the type, or -1 if this is not a type.</param>
            <returns>Returns true if the next expression is a cast.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.HasTypeSignature(System.Int32,System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Checks whether the symbol manager is currently sitting on an expression that looks like a type.
            </summary>
            <param name="startIndex">The first index of the expression.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="endIndex">Returns the last index of the type, or -1 if this is not a type.</param>
            <param name="generic">Returns a value indicating whether the type is generic.</param>
            <returns>Returns true if the next expression is a cast.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.IsDereferenceExpression(Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Analyzes the current expression to determine whether it is a dereference expression.
            </summary>
            <param name="leftSide">The left side of the expression.</param>
            <returns>Returns true if the expression is a dereference expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.AdvanceToClosingGenericSymbol(System.Int32)">
            <summary>
            Moves to the closing bracket of the current generic symbol.
            </summary>
            <param name="startIndex">The index just past the opening bracket of the generic.</param>
            <returns>Returns the index of the closing bracket in the generic, or -1 if this
            is not a generic.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ConvertTypeExpression(Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Converts the given expression into a literal expression containing a type token.
            </summary>
            <param name="expression">The expression to convert.</param>
            <returns>Returns the converted expression.</returns>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ClassModifiers">
            <summary>
            The allowable modifiers on a class element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.EnumModifiers">
            <summary>
            The allowable modifiers on an enum element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.DelegateModifiers">
            <summary>
            The allowable modifiers on a delegate element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.FieldModifiers">
            <summary>
            The allowable modifiers on a field element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.MethodModifiers">
            <summary>
            The allowable modifiers on a method element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ConstructorModifiers">
            <summary>
            The allowable modifiers on a constructor element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.DestructorModifiers">
            <summary>
            The allowable modifiers on a destructor element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.PropertyModifiers">
            <summary>
            The allowable modifiers on a property element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.IndexerModifiers">
            <summary>
            The allowable modifiers on an indexer element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.EventModifiers">
            <summary>
            The allowable modifiers on an event element.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.AddElementToPartialElementsList(Microsoft.StyleCop.CSharp.CsElement,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.StyleCop.CSharp.CsElement}})">
            <summary>
            Adds an element to the list of partial elements, if necessary.
            </summary>
            <param name="element">The element to add.</param>
            <param name="partialElements">The collection of partial elements.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.SanityCheckElementTypeAgainstParent(Microsoft.StyleCop.CSharp.ElementType,Microsoft.StyleCop.CSharp.CsElement)">
            <summary>
            Checks the type of an element against the type of its parent to verify that the
            parent type can have a child of the given type.
            </summary>
            <param name="elementType">The type of the element.</param>
            <param name="parent">The parent.</param>
            <returns>Returns true if the parent can have a child of the given type.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.IsCodeAnalysisSuppression(Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Determines whether the given expression is the start of a CodeAnalysis SuppressMessage attribute.
            </summary>
            <param name="name">The expression to check.</param>
            <returns>Returns true if the expression is a CodeAnalysis SuppressMessage; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.TryCrackCodeAnalysisSuppression(Microsoft.StyleCop.CSharp.MethodInvocationExpression,System.String@,System.String@,System.String@)">
            <summary>
            Extracts the CheckID for the rule being suppressed, from the given Code Analysis SuppressMessage attribute expression.
            </summary>
            <param name="codeAnalysisAttributeExpression">The expression to parse.</param>
            <param name="ruleId">Returns the rule ID.</param>
            <param name="ruleName">Returns the rule name.</param>
            <param name="ruleNamespace">Returns the namespace that contains the rule.</param>
            <returns>Returns true if the ID, name, and namespace were successfully extracted from the suppression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ExtractStringFromAttributeExpression(Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Attempts to extract a string from the given attribute expression, it if is a literal expression containing a string.
            </summary>
            <param name="expression">The expression.</param>
            <returns>Returns the string or null.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseElementContainer(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.StyleCop.CSharp.CsElement}},System.Boolean)">
            <summary>
            Parses the body of an element that is enclosed in curly brackets and contains other elements as children.
            </summary>
            <param name="element">The element to parse.</param>
            <param name="elementReference">Reference to the element being created.</param>
            <param name="partialElements">The collection of partial elements found while parsing the files.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseElementContainerBody(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.StyleCop.CSharp.CsElement}},System.Boolean)">
            <summary>
            Parses the body of a container element.
            </summary>
            <param name="element">The element to parse.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="partialElements">The collection of partial elements found while parsing the files.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the closing curly bracket.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.InitializeElement(Microsoft.StyleCop.CSharp.CsElement)">
            <summary>
            Initializes a new element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.MoveToElementDeclaration(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,Microsoft.StyleCop.CSharp.XmlHeader@,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute}@)">
            <summary>
            Moves past whitespace, comments, preprocessors, xml headers, and attributes, 
            up to the start of the next element.
            </summary>
            <param name="parentElementReference">A reference to the parent element.</param>
            <param name="childElementReference">A reference to the child element about to be created.</param>
            <param name="unsafeCode">Indicates whether the code is unsafe.</param>
            <param name="xmlHeader">Returns the xml header, if any.</param>
            <param name="attributes">Returns the list of attributes, if any.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetElementType(Microsoft.StyleCop.CSharp.CsElement,System.Boolean)">
            <summary>
            Figures out the type of the next element.
            </summary>
            <param name="parent">The parent of the element.</param>
            <param name="unsafeCode">Indicates whether the element is contained within a block of unsafe code.</param>
            <returns>Returns the element type or null if the element type cannot be determined..</returns>
            <remarks>This method assumes that the symbol manager has been advanced past all whitespace,
            comments, headers, preprocessors, attributes, etc., and that it is sitting at the beginning
            of the next element.</remarks>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseElement(Microsoft.StyleCop.CSharp.ElementType,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.StyleCop.CSharp.CsElement}},System.Boolean,System.Boolean,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute})">
            <summary>
            Parses and returns an element.
            </summary>
            <param name="elementType">The type of element to parse.</param>
            <param name="parent">The parent of the element.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="partialElements">The collection of partial elements found while parsing the files.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <param name="xmlHeader">The element's documentation header.</param>
            <param name="attributes">The attributes on the element.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseNamespace(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.StyleCop.CSharp.CsElement}},System.Boolean,System.Boolean,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute})">
            <summary>
            Parses and returns a namespace.
            </summary>
            <param name="parent">The parent of the namespace.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="partialElements">The collection of partial elements found while parsing the files.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <param name="xmlHeader">The element's documentation header.</param>
            <param name="attributes">The attributes on the element.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseUsingDirective(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean)">
            <summary>
            Parses and returns a using directive.
            </summary>
            <param name="parent">The parent of the namespace.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseExternAliasDirective(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Parses and returns a extern alias directive.
            </summary>
            <param name="parent">The parent of the namespace.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseClass(Microsoft.StyleCop.CSharp.ElementType,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.StyleCop.CSharp.CsElement}},System.Boolean,System.Boolean,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute})">
            <summary>
            Parses and returns a class, struct, or interface.
            </summary>
            <param name="elementType">The type of the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="partialElements">The collection of partial elements found while parsing the files.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <param name="xmlHeader">The element's documentation header.</param>
            <param name="attributes">The attributes on the element.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseEnum(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute})">
            <summary>
            Parses and returns an enum.
            </summary>
            <param name="parent">The parent of the element.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <param name="xmlHeader">The element's documentation header.</param>
            <param name="attributes">The attributes on the element.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseEnumItems(Microsoft.StyleCop.CSharp.Enum,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Parses and returns the items within an enum element.
            </summary>
            <param name="parent">The parent enum element.</param>
            <param name="parentReference">Reference to the parent of the items we're creating.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseDelegate(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute})">
            <summary>
            Parses and returns a delegate.
            </summary>
            <param name="parent">The parent of the element.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <param name="xmlHeader">The element's documentation header.</param>
            <param name="attributes">The attributes on the element.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseField(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute})">
            <summary>
            Parses and returns a field.
            </summary>
            <param name="parent">The parent of the element.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <param name="xmlHeader">The element's documentation header.</param>
            <param name="attributes">The attributes on the element.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseFieldDeclarators(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,Microsoft.StyleCop.CSharp.TypeToken)">
            <summary>
            Parses and returns the declarators for a field.
            </summary>
            <param name="fieldReference">A reference to the field.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="fieldType">The field type.</param>
            <returns>Returns the declarators.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseMethod(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute})">
            <summary>
            Parses and returns a method.
            </summary>
            <param name="parent">The parent of the element.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <param name="xmlHeader">The element's documentation header.</param>
            <param name="attributes">The attributes on the element.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseConstructor(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute})">
            <summary>
            Parses and returns a constructor.
            </summary>
            <param name="parent">The parent of the element.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <param name="xmlHeader">The element's documentation header.</param>
            <param name="attributes">The attributes on the element.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseDestructor(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute})">
            <summary>
            Parses and returns a destructor.
            </summary>
            <param name="parent">The parent of the element.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <param name="xmlHeader">The element's documentation header.</param>
            <param name="attributes">The attributes on the element.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseProperty(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute})">
            <summary>
            Parses and returns a property.
            </summary>
            <param name="parent">The parent of the element.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <param name="xmlHeader">The element's documentation header.</param>
            <param name="attributes">The attributes on the element.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseIndexer(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute})">
            <summary>
            Parses and returns an indexer.
            </summary>
            <param name="parent">The parent of the element.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <param name="xmlHeader">The element's documentation header.</param>
            <param name="attributes">The attributes on the element.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseEvent(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute})">
            <summary>
            Parses and returns a event.
            </summary>
            <param name="parent">The parent of the element.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <param name="xmlHeader">The element's documentation header.</param>
            <param name="attributes">The attributes on the element.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseAccessor(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute})">
            <summary>
            Parses and returns a property, indexer, or event accessor.
            </summary>
            <param name="parent">The parent of the element.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <param name="xmlHeader">The element's documentation header.</param>
            <param name="attributes">The attributes on the element.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseParameterList(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,Microsoft.StyleCop.CSharp.SymbolType)">
            <summary>
            Parses an element's parameter list.
            </summary>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="openingBracketType">The type of the bracket which opens the parameter list.</param>
            <returns>Returns the collection of parameters.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseParameterList(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,Microsoft.StyleCop.CSharp.SymbolType,System.Boolean)">
            <summary>
            Parses an element's parameter list.
            </summary>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="openingBracketType">The type of the bracket which opens the parameter list.</param>
            <param name="staticMethod">Indicates whether the parameters are part of a static method.</param>
            <returns>Returns the collection of parameters.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseAnonymousMethodParameterList(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Parses an anonymous method or lambda expression's parameter list.
            </summary>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <returns>Returns the collection of parameters.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetElementModifiers(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.CSharp.AccessModifierType@,System.String[])">
            <summary>
            Gets the modifiers from an element's declaration.
            </summary>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="accessModifier">Returns the access modifier type for the element.</param>
            <param name="allowedModifiers">The list of keyword modifiers allowed on the element.</param>
            <returns>Returns the collection of modifiers.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetOtherElementModifier(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.String[],System.Collections.Generic.Dictionary{Microsoft.StyleCop.CSharp.CsTokenType,Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.CSharp.Symbol)">
            <summary>
            Gets another type of modifier for an element declaration.
            </summary>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="allowedModifiers">The types of allowed modifiers for the element.</param>
            <param name="modifiers">The collection of modifiers on the element.</param>
            <param name="symbol">The modifier symbol.</param>
            <returns>true to continue collecting modifiers; false to quit.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseTypeConstraintClauses(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Parses one or more type constraint clauses.
            </summary>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <returns>Returns the clauses.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseEmptyElement(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean)">
            <summary>
            Parses and returns an empty element.
            </summary>
            <param name="parent">The parent of the namespace.</param>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="generated">Indicates whether the code is marked as generated code.</param>
            <returns>Returns the element.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetElementNameToken(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Gets a token representing the name of an element.
            </summary>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is unsafe.</param>
            <returns>Returns the name token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetElementNameToken(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean)">
            <summary>
            Gets a token representing the name of an element.
            </summary>
            <param name="elementReference">A reference to the element being created.</param>
            <param name="unsafeCode">Indicates whether the code is unsafe.</param>
            <param name="allowArrayBrackets">Indicates whether the name is allowed to contain array brackets.</param>
            <returns>Returns the name token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetXmlHeader(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Gets an xml header.
            </summary>
            <param name="elementReference">A reference to the element being created.</param>
            <returns>Returns the header or null if there is no header.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.AddRuleSuppressionsForElement(Microsoft.StyleCop.CSharp.CsElement)">
            <summary>
            Adds any suppressions for the given element by scanning the attributes on the element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseStatementContainer(Microsoft.StyleCop.CSharp.CsElement,System.Boolean,System.Boolean)">
            <summary>
            Parses the body of an element that contains a list of statements as children.
            </summary>
            <param name="element">The element to parse.</param>
            <param name="interfaceType">Indicates whether this type of statement container can appear in an interface.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseStatementScope(Microsoft.StyleCop.CSharp.IWriteableCodeUnit,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Parses the body of an element that contains a list of statements as children.
            </summary>
            <param name="parent">The parent of the scope.</param>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the closing curly bracket.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNextStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code part.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNextStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,Microsoft.StyleCop.CSharp.VariableCollection)">
            <summary>
            Reads the next statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code part.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="variables">Returns the list of variables defined in the statement.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.MoveToStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Moves past whitespace, comments, and preprocessors, up to the start of the next statement.
            </summary>
            <param name="parentReference">The parent code part.</param>
            <returns>Returns true if there is another statement to parse.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseOtherStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,Microsoft.StyleCop.CSharp.VariableCollection)">
            <summary>
            Reads a statement beginning with an unknown word.
            </summary>
            <param name="parentReference">The parent code part.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="variables">Returns the list of variables defined in the statement.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseVariableDeclarationStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,Microsoft.StyleCop.CSharp.VariableCollection)">
            <summary>
            Reads the next variable declaration statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="variables">Returns the list of variables defined in the statement.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseLabelStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads a label statement.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseExpressionStatement(System.Boolean)">
            <summary>
            Reads the next expression statement from the file and returns it.
            </summary>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseBlockStatement(System.Boolean)">
            <summary>
            Reads the next block statement from the file and returns it.
            </summary>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseIfStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next if-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetAttachedElseStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.CSharp.Statement,System.Boolean)">
            <summary>
            Looks for an else-statement, and if it is found, parses and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="parentStatement">The parent of the else-statement.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseWhileStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next while-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseDoWhileStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next do-while-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseForStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next for-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseForStatementInitializers(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Parses the initializers from a for-statement.
            </summary>
            <param name="statementReference">A reference to the statement being created.</param>
            <param name="unsafeCode">Indicates whether the code is located within an unsafe block.</param>
            <returns>Returns the list of initializers.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseForStatementCondition(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Parses the condition expression from a for-statement.
            </summary>
            <param name="statementReference">A reference to the statement being created.</param>
            <param name="unsafeCode">Indicates whether the code is located within an unsafe block.</param>
            <returns>Returns the condition expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseForStatementIterators(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,Microsoft.StyleCop.CSharp.Bracket,Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken})">
            <summary>
            Parses the iterators from a for-statement.
            </summary>
            <param name="statementReference">A reference to the statement being created.</param>
            <param name="unsafeCode">Indicates whether the code is located within an unsafe block.</param>
            <param name="openParenthesis">The opening parentheis.</param>
            <param name="openParenthesisNode">The opening parenthesis node.</param>
            <returns>Returns the list of iterators.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseForeachStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next foreach-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseSwitchStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next switch-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseSwitchStatementCaseStatements(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,Microsoft.StyleCop.CSharp.SwitchDefaultStatement@)">
            <summary>
            Parses the case and default statements within a switch statement.
            </summary>
            <param name="statementReference">A reference to the statement being created.</param>
            <param name="unsafeCode">Indicates whether the statement lies within a block of unsafe code.</param>
            <param name="defaultStatement">Returns the default statement.</param>
            <returns>Returns the list of case statements.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseSwitchCaseStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next case-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseSwitchDefaultStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next default-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseTryStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next try-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetAttachedCatchStatement(Microsoft.StyleCop.CSharp.TryStatement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Looks for a catch-statement, and if it is found, parses and returns it.
            </summary>
            <param name="tryStatement">The parent try statement.</param>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetAttachedFinallyStatement(Microsoft.StyleCop.CSharp.TryStatement,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Looks for a finally-statement, and if it is found, parses and returns it.
            </summary>
            <param name="tryStatement">The parent try statement.</param>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseLockStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next lock-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseUsingStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next using-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseCheckedStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next checked-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseUncheckedStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next unchecked-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseFixedStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next fixed-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseUnsafeStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Reads the next unsafe-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseBreakStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Reads the next break-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseContinueStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Reads the next continue-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseGotoStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next goto-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseReturnStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next return-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseYieldStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next yield-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseThrowStatement(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Reads the next throw-statement from the file and returns it.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <returns>Returns the statement.</returns>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.lexer">
            <summary>
            The code lexer.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.document">
            <summary>
            The document being parsed.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.parser">
            <summary>
            The C# parser.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.symbols">
            <summary>
            The collection of symbols in the document.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.tokens">
            <summary>
            The collection of tokens in the document.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.#ctor(Microsoft.StyleCop.CSharp.CsParser,Microsoft.StyleCop.CSharp.CodeLexer)">
            <summary>
            Initializes a new instance of the CodeParser class.
            </summary>
            <param name="parser">The C# parser.</param>
            <param name="lexer">The lexer to use for parsing the code.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.#ctor(Microsoft.StyleCop.CSharp.CsParser,Microsoft.StyleCop.CSharp.SymbolManager)">
            <summary>
            Initializes a new instance of the CodeParser class.
            </summary>
            <param name="parser">The C# parser.</param>
            <param name="symbols">The symbols in the document to parse.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetFullName(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken}@)">
            <summary>
            Finds the end of a name, moving past member access operators.
            </summary>
            <param name="document">The document containing the tokens.</param>
            <param name="tokens">The token list.</param>
            <param name="startTokenNode">The first token of the name.</param>
            <param name="endTokenNode">Returns the last token of the name.</param>
            <returns>Returns the full name.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.FindEndOfName(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken})">
            <summary>
            Finds the end of the given name, moving past member access operators.
            </summary>
            <param name="document">The document containing the name.</param>
            <param name="tokens">The token list.</param>
            <param name="startTokenNode">The first token of the name within the token list.</param>
            <returns>Returns the last token of the name within the token list.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.MoveToNextCodeToken(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken}@)">
            <summary>
            Moves the index past any tokens that are not pure code. This includes whitespace, comments,
            assembly tags, preprocessors, etc.
            </summary>
            <param name="tokens">The token list.</param>
            <param name="start">The first token to move past.</param>
            <returns>Returns false if the end of the token list was reached.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.AddQualifications(System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Parameter},System.String)">
            <summary>
            Adds parameters to the fully qualified name of the item.
            </summary>
            <param name="parameters">The list of parameters on the element.</param>
            <param name="fullyQualifiedName">The fully qualified name of the element.</param>
            <returns>Returns the new fully qualified name string.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.TrimType(System.String)">
            <summary>
            Given a string containing a type, trims out all whitespace and comments from the type string. 
            </summary>
            <param name="type">The original type string.</param>
            <returns>Returns the trimmed string.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ExtractTypeTokenFromLiteralExpression(Microsoft.StyleCop.CSharp.LiteralExpression)">
            <summary>
            Extracts a TypeToken from the literal expression, assuming that one exists.
            </summary>
            <param name="literal">The literal expression.</param>
            <returns>Returns the type token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseDocument">
            <summary>
            Parses the contents of the document.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ParseAttribute(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,Microsoft.StyleCop.CSharp.CsDocument)">
            <summary>
            Parses an attribute.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the attribute lies within a block of unsafe code.</param>
            <param name="masterDocument">The master document object.</param>
            <returns>Returns the attribute.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.MovePastTokens(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken}@,Microsoft.StyleCop.CSharp.CsTokenType[])">
            <summary>
            Moves the index past any whitespace characters.
            </summary>
            <param name="tokens">The collection containing the start token.</param>
            <param name="start">The first token to move past.</param>
            <param name="movePastTypes">The types of tokens to move past.</param>
            <returns>Returns false if the end of the token list was reached.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetPreprocessorDirectiveToken(Microsoft.StyleCop.CSharp.Symbol,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Gets and converts preprocessor directive.
            </summary>
            <param name="preprocessorSymbol">The preprocessor symbol.</param>
            <param name="parent">The parent code part.</param>
            <param name="generated">Indicates whether the preprocessor directive lies within a block of generated code.</param>
            <returns>Returns the preprocessor directive.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetConditionalCompilationDirective(Microsoft.StyleCop.CSharp.Symbol,Microsoft.StyleCop.CSharp.ConditionalCompilationDirectiveType,System.Int32,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Gets the next conditional compilation directive from the code.
            </summary>
            <param name="preprocessorSymbol">The symbol representing the directive.</param>
            <param name="type">The type of the conditional compilation directive.</param>
            <param name="startIndex">The start index of the body of the directive.</param>
            <param name="parent">The parent code part.</param>
            <param name="generated">Indicates whether the directive lies within a block of generated code.</param>
            <returns>Returns the directive.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetFileHeader(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Gets the file header from a piece of code. The file header must start on the first
            line of code, and it must follow the format shown below. This method will strip off
            the first and last lines, as well as the leading slashes on all lines, and return only
            the header text.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <returns>Returns the file header.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetAttribute(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Gets an attribute from the code.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the attribute lies within an unsafe code block.</param>
            <returns>Returns the attribute.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetGenericToken(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Checks whether the symbol manager is currently sitting on the start of a generic token. 
            If so, reads the generic and returns it as a token.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <returns>Returns the generic token, or null if the symbol manager is not sitting on a generic.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetGenericTokenAux(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Int32,System.Int32@)">
            <summary>
            Reads a generic token from the document.
            </summary>
            <param name="genericTokenReference">A reference to the generic token.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="startIndex">The first index of the generic.</param>
            <param name="lastIndex">Returns the last index of the generic.</param>
            <returns>Returns the generic token, or null if the symbol manager is not sitting on a generic.</returns>
            <remarks>This should only be called by GetGenericToken.</remarks>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetGenericArgumentList(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,Microsoft.StyleCop.CSharp.CsToken,System.Int32,System.Int32@)">
            <summary>
            Gets the argument list from a generic type.
            </summary>
            <param name="genericTypeReference">A reference to the generic type.</param>
            <param name="unsafeCode">Indicates whether the code is marked as unsafe.</param>
            <param name="name">Optional name of the generic type.</param>
            <param name="startIndex">The first index of the generic.</param>
            <param name="endIndex">Returns the index of the last token in the generic argument list.</param>
            <returns>Returns a list of tokens containing the arguments.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetVariable(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the next variable.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code is within an unsafe block.</param>
            <param name="allowTypelessVariable">Indicates whether to allow a variable with no type defined.</param>
            <param name="onlyTypelessVariable">Indicates whether to only get a typeless variable.</param>
            <returns>Returns the variable.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.AdvanceToEndOfName(System.Int32)">
            <summary>
            Find the end of a name.
            </summary>
            <param name="startIndex">The first index of the name.</param>
            <returns>Returns the last index of the name.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.AdvanceToEndOfName(System.Int32,System.Boolean@)">
            <summary>
            Find the end of a name.
            </summary>
            <param name="startIndex">The first index of the name.</param>
            <param name="generic">Returns true if the first part of the name is a generic.</param>
            <returns>Returns the last index of the name.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.AdvanceToNextCodeSymbol(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Advances past any whitespace and comments in the code.
            </summary>
            <param name="parentReference">The parent code part.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.AdvanceToNextCodeSymbol(Microsoft.StyleCop.CSharp.CodeParser.SkipSymbols,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Advances past any whitespace and comments in the code.
            </summary>
            <param name="skip">Indicates the types of tokens to advance past.</param>
            <param name="parentReference">The parent code part.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNextSymbol(Microsoft.StyleCop.CSharp.SymbolType,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Advances to the next code symbol and returns it.
            </summary>
            <param name="symbolType">The expected type of the symbol.</param>
            <param name="parentReference">The parent code unit.</param>
            <returns>Returns the next code symbol.</returns>
            <exception cref="T:Microsoft.StyleCop.SyntaxException">Will be thrown if there are no more symbols in the document or if the 
            next symbol is not of the expected type.</exception>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNextSymbol(Microsoft.StyleCop.CSharp.SymbolType,Microsoft.StyleCop.CSharp.CodeParser.SkipSymbols,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Advances to the next code symbol and returns it.
            </summary>
            <param name="symbolType">The expected type of the symbol.</param>
            <param name="skip">The types of symbols to skip past.</param>
            <param name="parentReference">The parent code part.</param>
            <returns>Returns the next code symbol.</returns>
            <exception cref="T:Microsoft.StyleCop.SyntaxException">Will be thrown if there are no more symbols in the document or if the 
            next symbol is not of the expected type.</exception>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNextSymbol(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Advances to the next code symbol and returns it.
            </summary>
            <param name="parentReference">The parent code part.</param>
            <returns>Returns the next code symbol.</returns>
            <exception cref="T:Microsoft.StyleCop.SyntaxException">Will be thrown if there are no more symbols in the document.</exception>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNextSymbol(Microsoft.StyleCop.CSharp.CodeParser.SkipSymbols,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Advances to the next code symbol and returns it.
            </summary>
            <param name="skip">Indicates the types of symbols to skip past.</param>
            <param name="parentReference">The parent code part.</param>
            <returns>Returns the next code symbol.</returns>
            <exception cref="T:Microsoft.StyleCop.SyntaxException">Will be thrown if there are no more symbols in the document.</exception>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNextSymbol(Microsoft.StyleCop.CSharp.CodeParser.SkipSymbols,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Advances to the next code symbol and returns it.
            </summary>
            <param name="skip">Indicates the types of symbols to skip past.</param>
            <param name="parentReference">The parent code part.</param>
            <param name="allowNull">If true, indicates that this method is allowed to return a null symbol, if there are no
            more symbols in the document. If false, the method will throw an exception if it is unable to get another symbol.</param>
            <returns>Returns the next code symbol.</returns>
            <exception cref="T:Microsoft.StyleCop.SyntaxException">Will be thrown if there are no more symbols in the document.</exception>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNextCodeSymbolIndex(System.Int32)">
            <summary>
            Advances past any whitespace and comments in the code.
            </summary>
            <param name="startIndex">The first index to peek.</param>
            <returns>Returns the peek index of the next code symbol or -1 if there 
            are no more code symbols.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetBestLineNumber">
            <summary>
            Gets the closest line number to the current part of the file being parsed.
            </summary>
            <returns>Returns the best line number.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.CreateSyntaxException">
            <summary>
            Creates a new syntax exception which attempts to find the best line number 
            given the current set up symbols and tokens.
            </summary>
            <returns>Returns the exception.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.DebugValidateParentReferences">
            <summary>
            Walks through the document model and ensures that every item in the model is 
            correctly mapped to a parent code part.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.TokenTypeFromSymbolType(Microsoft.StyleCop.CSharp.SymbolType)">
            <summary>
            Converts a symbol type to a token type.
            </summary>
            <param name="symbolType">The symbol type to convert.</param>
            <returns>Returns the token type.</returns>
            <remarks>This method should only be used for converting whitespace and comment symbol types.</remarks>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetOperatorType(Microsoft.StyleCop.CSharp.Symbol,Microsoft.StyleCop.CSharp.OperatorType@,Microsoft.StyleCop.CSharp.OperatorCategory@)">
            <summary>
            Gets the type of the given operator symbol.
            </summary>
            <param name="symbol">The symbol to check.</param>
            <param name="type">Returns the operator type.</param>
            <param name="category">Returns the operator category.</param>
            <returns>Returns true if the symbol is an operator.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.SymbolTypeFromOperatorType(Microsoft.StyleCop.CSharp.OperatorType)">
            <summary>
            Gets the symbol type corresponding to the given operator type.
            </summary>
            <param name="operatorType">The operator type to convert.</param>
            <returns>Returns the symbol type.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.CreateOperatorToken(Microsoft.StyleCop.CSharp.Symbol,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Creates an operator token from the given symbol.
            </summary>
            <param name="symbol">The symbol to convert.</param>
            <param name="parentReference">The parent code part.</param>
            <param name="generated">Indicates whether the symbol lies within a generated code block.</param>
            <returns>Returns the operator symbol.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ConvertOperatorOverloadSymbol(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Converts an operator overload symbol.
            </summary>
            <param name="parentReference">The parent code part.</param>
            <returns>Returns the corresponding token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetToken(Microsoft.StyleCop.CSharp.CsTokenType,Microsoft.StyleCop.CSharp.SymbolType,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Gets a token of a specific type.
            </summary>
            <param name="tokenType">The type of the token to retrieve.</param>
            <param name="symbolType">The type of the expected symbol.</param>
            <param name="parentReference">Reference to the parent code part.</param>
            <returns>Returns the token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetToken(Microsoft.StyleCop.CSharp.CsTokenType,Microsoft.StyleCop.CSharp.SymbolType,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Gets a token of a specific type.
            </summary>
            <param name="tokenType">The type of the token to retrieve.</param>
            <param name="symbolType">The type of the expected symbol.</param>
            <param name="parentReference">Reference to the parent code part.</param>
            <param name="tokenParentReference">Reference to the parent of the new token.</param>
            <returns>Returns the token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.ConvertSymbol(Microsoft.StyleCop.CSharp.Symbol,Microsoft.StyleCop.CSharp.CsTokenType,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Converts a symbol to the given token type.
            </summary>
            <param name="symbol">The symbol to convert.</param>
            <param name="tokenType">The type of the token to retrieve.</param>
            <param name="parentReference">The parent code part.</param>
            <returns>Returns the token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetBracketToken(Microsoft.StyleCop.CSharp.CsTokenType,Microsoft.StyleCop.CSharp.SymbolType,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Gets a bracket token of a specific type.
            </summary>
            <param name="tokenType">The type of the token to retrieve.</param>
            <param name="symbolType">The type of the symbol.</param>
            <param name="parentReference">The parent code unit.</param>
            <returns>Returns the token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetOperatorToken(Microsoft.StyleCop.CSharp.OperatorType,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Gets an operator token of a specific type.
            </summary>
            <param name="operatorType">The type of the operator token to retrieve.</param>
            <param name="parentReference">The parent code part.</param>
            <returns>Returns the token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetTypeToken(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean)">
            <summary>
            Gets a token representing a type identifier.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="includeArrayBrackets">Indicates whether to include array brackets in the type token.</param>
            <returns>Returns the token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetTypeToken(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets a token representing a type identifier.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="includeArrayBrackets">Indicates whether to include array brackets in the type token.</param>
            <param name="isExpression">Indicates whether this type token comes at the end of an 'is' expression.</param>
            <returns>Returns the token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetTypeTokenAux(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32@)">
            <summary>
            Gets a token representing a type identifier.
            </summary>
            <param name="typeTokenReference">A reference to the type token.</param>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="includeArrayBrackets">Indicates whether to include array brackets in the type token.</param>
            <param name="isExpression">Indicates whether this type token comes at the end of an 'is' expression.</param>
            <param name="startIndex">The start position in the symbol list of the first symbol in the type token.</param>
            <param name="endIndex">Returns the index of the last symbol in the type token.</param>
            <returns>Returns the token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetTypeTokenBaseName(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.MasterList{Microsoft.StyleCop.CSharp.CsToken}@,System.Int32@,Microsoft.StyleCop.CSharp.GenericType@,System.Boolean)">
            <summary>
            Gets the base name and generic symbols for a type token.
            </summary>
            <param name="typeTokenReference">A reference to the type token.</param>
            <param name="typeTokens">The list of tokens in the type.</param>
            <param name="startIndex">The start index within the symbol list.</param>
            <param name="generic">Returns a value indicating whether the type is generic.</param>
            <param name="unsafeCode">Indicates whether the type is within a block of unsafe code.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetTypeTokenArrayBrackets(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.MasterList{Microsoft.StyleCop.CSharp.CsToken},System.Int32@)">
            <summary>
            Gets array brackets symbol for a type token, if they exist.
            </summary>
            <param name="typeTokenReference">A reference to the type token.</param>
            <param name="typeTokens">The tokens within the type token.</param>
            <param name="startIndex">The start index within the symbols.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetTypeTokenNullableTypeSymbol(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.MasterList{Microsoft.StyleCop.CSharp.CsToken},System.Boolean,System.Int32@)">
            <summary>
            Gets a nullable type symbol for a type token, if one exists.
            </summary>
            <param name="typeTokenReference">A reference to the type token.</param>
            <param name="typeTokens">The tokens within the type token.</param>
            <param name="isExpression">Indicates whether this is in an is expression.</param>
            <param name="startIndex">The start index within the symbols.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetTypeTokenDereferenceSymbols(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.MasterList{Microsoft.StyleCop.CSharp.CsToken},System.Int32@)">
            <summary>
            Gets the dereference symbols from a type token.
            </summary>
            <param name="typeTokenReference">A reference to the type token.</param>
            <param name="typeTokens">The type tokens list.</param>
            <param name="startIndex">The start index within the symbols list.</param>
            <returns>Returns true if there were one or more dereference symbols.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetTypeTokenExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean)">
            <summary>
            Gets a token representing a type identifier.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="includeArrayBrackets">Indicates whether to include array brackets in the type token.</param>
            <returns>Returns the token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetTypeTokenExpression(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets a token representing a type identifier.
            </summary>
            <param name="parentReference">The parent code unit.</param>
            <param name="unsafeCode">Indicates whether the code being parsed resides in an unsafe code block.</param>
            <param name="includeArrayBrackets">Indicates whether to include array brackets in the type token.</param>
            <param name="isExpression">Indicates whether this type token comes at the end of an 'is' expression.</param>
            <returns>Returns the token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.IsNullableTypeSymbolFromIsExpression(System.Int32)">
            <summary>
            Determines whether a question mark following the type from an 'is' or an 'as' statement is
            actually a nullable type question mark rather than a conditional question mark.
            </summary>
            <param name="index">The peek index of the question mark within the symbol manager.</param>
            <returns>Returns true if the question mark is a nullable type question mark.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetConditionalPreprocessorBodyExpression(Microsoft.StyleCop.CSharp.CsParser,Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CSharp.Symbol,System.Int32)">
            <summary>
            Extracts the body of the given preprocessor directive symbol, parses it, and returns the parsed expression.
            </summary>
            <param name="parser">The C# parser.</param>
            <param name="sourceCode">The source code containing the preprocessor directive symbol.</param>
            <param name="preprocessorSymbol">The preprocessor directive symbol.</param>
            <param name="startIndex">The index of the start of the expression body within the text string.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNextConditionalPreprocessorExpression(Microsoft.StyleCop.SourceCode)">
            <summary>
            Reads the next expression from a conditional preprocessor directive.
            </summary>
            <param name="sourceCode">The source code.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetNextConditionalPreprocessorExpression(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence)">
            <summary>
            Reads the next expression from a conditional preprocessor directive.
            </summary>
            <param name="sourceCode">The source code.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetConditionalPreprocessorExpressionExtension(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence)">
            <summary>
            Given an expression, reads further to see if it is actually a sub-expression within a larger expression.
            </summary>
            <param name="sourceCode">The source code.</param>
            <param name="parentReference">The parent code part.</param>
            <param name="leftSide">The known expression which might have an extension.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.AdvanceToNextConditionalDirectiveCodeSymbol(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Advances past any whitespace and comments in the code.
            </summary>
            <param name="parentReference">The parent code part.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetConditionalPreprocessorConstantExpression">
            <summary>
            Reads an expression starting with an unknown word.
            </summary>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetConditionalPreprocessorNotExpression(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Reads a NOT expression.
            </summary>
            <param name="sourceCode">The source code containing the expression.</param>
            <param name="parentReference">The parent code part.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetConditionalPreprocessorParenthesizedExpression(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Reads an expression wrapped in parenthesis.
            </summary>
            <param name="sourceCode">The source code containing the expression.</param>
            <param name="parentReference">The parent code part.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetConditionalPreprocessorEqualityExpression(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence)">
            <summary>
            Reads a relational expression.
            </summary>
            <param name="sourceCode">The file containing the expression.</param>
            <param name="parentReference">The parent code unit.</param>
            <param name="leftHandSide">The expression on the left hand side of the operator.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeParser.GetConditionalPreprocessorAndOrExpression(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence)">
            <summary>
            Reads a conditional logical expression.
            </summary>
            <param name="sourceCode">The source code containing the expression.</param>
            <param name="parentReference">The parent code unit.</param>
            <param name="leftHandSide">The expression on the left hand side of the operator.</param>
            <param name="previousPrecedence">The precedence of the expression just before this one.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeParser.Document">
            <summary>
            Gets the parsed document.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence">
            <summary>
            The operator type of an expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.Global">
            <summary>
            A global expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.Primary">
            <summary>
            A primary expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.Unary">
            <summary>
            A unary expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.Multiplicative">
            <summary>
            A multiplication, division, or modulation expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.Additive">
            <summary>
            An addition or subtraction expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.Shift">
            <summary>
            A shift expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.Relational">
            <summary>
            A relational or type nesting expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.Equality">
            <summary>
            An equality or non-equality expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.LogicalAnd">
            <summary>
            A logical AND expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.LogicalXor">
            <summary>
            A logical XOR expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.LogicalOr">
            <summary>
            A logical OR expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.ConditionalAnd">
            <summary>
            A conditional AND expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.ConditionalOr">
            <summary>
            A condition OR expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.NullCoalescing">
            <summary>
            A null coalescing expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.Assignment">
            <summary>
            An assignment expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.Conditional">
            <summary>
            A conditional expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.Query">
            <summary>
            A query expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.ExpressionPrecedence.None">
            <summary>
            No precedence.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CodeParser.SkipSymbols">
            <summary>
            The types of symbols to skip while advancing past symbols.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.SkipSymbols.None">
            <summary>
            Don't skip any symbols.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.SkipSymbols.WhiteSpace">
            <summary>
            Skip past all whitespace symbols.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.SkipSymbols.EndOfLine">
            <summary>
            Skip past all end-of-line characters.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.SkipSymbols.SingleLineComment">
            <summary>
            Skip past all single-line comments.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.SkipSymbols.MultiLineComment">
            <summary>
            Skip past all multi-line comments.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.SkipSymbols.XmlHeader">
            <summary>
            Skip past all Xml header lines.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.SkipSymbols.Preprocessor">
            <summary>
            Skip past all preprocessor directives.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeParser.SkipSymbols.All">
            <summary>
            Skip past all of these types of symbols.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.GenericType">
            <summary>
            Describes a generic type token.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.GenericType.typeParameters">
            <summary>
            The types within the generic type.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.GenericType.#ctor(Microsoft.StyleCop.MasterList{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the GenericType class.
            </summary>
            <param name="childTokens">The list of child tokens that form the generic token.</param>
            <param name="location">The location of the generic in the code.</param>
            <param name="parent">The parent of the token.</param>
            <param name="generated">True if the token is inside of a block of generated code.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.GenericType.CreateTextString">
            <summary>
            Creates a text string based on the child tokens in the token.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.GenericType.ExtractGenericTypes">
            <summary>
            Extracts the generic types from the type list and saves them.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.GenericType.GenericTypesParameters">
            <summary>
            Gets the types within the generic type.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.YieldStatement">
            <summary>
            A yield-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.YieldStatement.type">
            <summary>
            The type of the yield statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.YieldStatement.returnValue">
            <summary>
            The expression being returned, if any.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.YieldStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.YieldStatement.Type,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the YieldStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="type">The type of the yield statement.</param>
            <param name="returnValue">The yield return value expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.YieldStatement.YieldType">
            <summary>
            Gets the type of the yield statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.YieldStatement.ReturnValue">
            <summary>
            Gets the yield return value expression, if there is one.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.YieldStatement.Type">
            <summary>
            The yield statement type.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.YieldStatement.Type.Break">
            <summary>
            A yield break statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.YieldStatement.Type.Return">
            <summary>
            A yield return statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.NullCoalescingExpression">
            <summary>
            An expression representing a null coalescing operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.NullCoalescingExpression.leftHandSide">
            <summary>
            The left hand side of the expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.NullCoalescingExpression.rightHandSide">
            <summary>
            The right hand side of the expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.NullCoalescingExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the NullCoalescingExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="leftHandSide">The left hand side of the expression.</param>
            <param name="rightHandSide">The right hand side of the expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.NullCoalescingExpression.LeftHandSide">
            <summary>
            Gets the left hand side of the expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.NullCoalescingExpression.RightHandSide">
            <summary>
            Gets the right hand side of the expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ArithmeticExpression">
            <summary>
            An expression representing an arithmetic operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ArithmeticExpression.operatorType">
            <summary>
            The type of arithmetic operation being performed.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ArithmeticExpression.leftHandSide">
            <summary>
            The left hand size of the expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ArithmeticExpression.rightHandSide">
            <summary>
            The right hand size of the expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ArithmeticExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.ArithmeticExpression.Operator,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the ArithmeticExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="operatorType">The type of operation being performed.</param>
            <param name="leftHandSide">The left hand side of the expression.</param>
            <param name="rightHandSide">The right hand side of the expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ArithmeticExpression.OperatorType">
            <summary>
            Gets the type of arithmetic operation being performed.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ArithmeticExpression.LeftHandSide">
            <summary>
            Gets the left hand side of the expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ArithmeticExpression.RightHandSide">
            <summary>
            Gets the right hand side of the expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ArithmeticExpression.Operator">
            <summary>
            The various arithmetic operator types.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ArithmeticExpression.Operator.Addition">
            <summary>
            The + operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ArithmeticExpression.Operator.Subtraction">
            <summary>
            The - operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ArithmeticExpression.Operator.Multiplication">
            <summary>
            The * operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ArithmeticExpression.Operator.Division">
            <summary>
            The / operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ArithmeticExpression.Operator.Mod">
            <summary>
            The % operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ArithmeticExpression.Operator.RightShift">
            <summary>
            The right-shift operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ArithmeticExpression.Operator.LeftShift">
            <summary>
            The left-shift operator.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Indexer">
            <summary>
            Describes an indexer element.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Indexer.returnType">
            <summary>
            The return type for the indexer.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Indexer.parameters">
            <summary>
            The input parameters.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Indexer.get">
            <summary>
            The get accessor for the indexer.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Indexer.set">
            <summary>
            The set accessor for the indexer.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Indexer.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,Microsoft.StyleCop.CSharp.TypeToken,System.Collections.Generic.IList{Microsoft.StyleCop.CSharp.Parameter},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Indexer class.
            </summary>
            <param name="document">The documenent that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="returnType">The return type of the indexer.</param>
            <param name="parameters">The parameters to the indexer.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Indexer.Initialize">
            <summary>
            Initializes the contents of the indexer.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Indexer.ReturnType">
            <summary>
            Gets the return type for the indexer.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Indexer.Parameters">
            <summary>
            Gets the list of input parameters for the indexer.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Indexer.GetAccessor">
            <summary>
            Gets the get accessor for the indexer, if there is one.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Indexer.SetAccessor">
            <summary>
            Gets the set accessor for the indexer, if there is one.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Accessor">
            <summary>
            Describes an accessor within a property, indexer, or event.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Accessor.accessorType">
            <summary>
            The type of the accessor.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Accessor.returnType">
            <summary>
            The accessor's return type.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Accessor.parameters">
            <summary>
            The accessor's input parameters.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Accessor.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.AccessorType,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Accessor class.
            </summary>
            <param name="document">The documenent that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="accessorType">The type of the accessor.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Accessor.Initialize">
            <summary>
            Initializes the contents of the accessor.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Accessor.CreateVoidTypeToken(Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Creates a TypeToken of type void.
            </summary>
            <param name="parentReference">The parent code part.</param>
            <returns>Returns the token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Accessor.FillDetails(Microsoft.StyleCop.CSharp.CsElement)">
            <summary>
            Fills in the details of the accessor based on its type.
            </summary>
            <param name="parent">The parent of the accessor.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Accessor.FillGetAccessorDetails(Microsoft.StyleCop.CSharp.CsElement)">
            <summary>
            Fills in the details of the get accessor.
            </summary>
            <param name="parent">The parent of the accessor.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Accessor.FillSetAccessorDetails(Microsoft.StyleCop.CSharp.CsElement)">
            <summary>
            Fills in the details of the set accessor.
            </summary>
            <param name="parent">The parent of the accessor.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Accessor.AccessorType">
            <summary>
            Gets the type of the accessor.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Accessor.ReturnType">
            <summary>
            Gets the accessor's return type.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Accessor.Parameters">
            <summary>
            Gets the list of input parameters for the accessor.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Rules">
            <summary>
            The list of rules that can be triggered by this parser module.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Rules.FileMustBeReadable">
            <summary>
            The file could not be read.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Rules.ExceptionOccurred">
            <summary>
            An exception occurred while parsing the file.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Rules.SyntaxException">
            <summary>
            A syntax error was found in the code.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.QueryClauseType">
            <summary>
            The various <see cref="T:Microsoft.StyleCop.CSharp.QueryClause"/> types in a C# document.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryClauseType.Continuation">
            <summary>
            A query continuation clause.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryClauseType.From">
            <summary>
            A from clause.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryClauseType.Group">
            <summary>
            A group clause.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryClauseType.Join">
            <summary>
            A join clause.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryClauseType.Let">
            <summary>
            A let clause.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryClauseType.OrderBy">
            <summary>
            An order-by clause.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryClauseType.Select">
            <summary>
            A select clause.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryClauseType.Where">
            <summary>
            A where clause.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.QueryWhereClause">
            <summary>
            Describes a where clause in a query expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryWhereClause.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the QueryWhereClause class.
            </summary>
            <param name="tokens">The list of tokens that form the clause.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ClassBase">
            <summary>
            The base class for classes, structs and interfaces.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ClassBase.baseClass">
            <summary>
            The name of the base class that this item inherits from.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ClassBase.implementedInterfaces">
            <summary>
            The list of interfaces that this item implements.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ClassBase.typeConstraints">
            <summary>
            The list of type constraints on the item, if any.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ClassBase.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.ElementType,System.String,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.TypeParameterConstraintClause},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ClassBase class.
            </summary>
            <param name="document">The document that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="type">The element type.</param>
            <param name="name">The name of this element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="typeConstraints">The list of type constraints on the element.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ClassBase.SetInheritedItems(Microsoft.StyleCop.CSharp.Declaration)">
            <summary>
            Sets the inherited items of the class.
            </summary>
            <param name="declaration">The class declaration.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ClassBase.ImplementedInterfaces">
            <summary>
            Gets the list of interfaces that this element implements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ClassBase.BaseClass">
            <summary>
            Gets the name of the base element that this element inherits from.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ClassBase.PartialElementList">
            <summary>
            Gets the list of partial interfaces with the same fully qualified name as this element.
            </summary>
            <remarks>If this is not a partial element, this property returns null.</remarks>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ClassBase.TypeConstraints">
            <summary>
            Gets the list of type constraints on the element, if any.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CsTokenList">
            <summary>
            A list of tokens.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsTokenList.#ctor(Microsoft.StyleCop.MasterList{Microsoft.StyleCop.CSharp.CsToken})">
            <summary>
            Initializes a new instance of the CsTokenList class.
            </summary>
            <param name="masterList">The master list that this list points into.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsTokenList.#ctor(Microsoft.StyleCop.MasterList{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken})">
            <summary>
            Initializes a new instance of the CsTokenList class.
            </summary>
            <param name="masterList">The master list that this list points into.</param>
            <param name="firstItemNode">The first item in the master list.</param>
            <param name="lastItemNode">The last item in the master list.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsTokenList.MatchTokens(Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken},System.String[])">
            <summary>
            Determines whether the given token list contains the given strings, skipping whitespace tokens and
            comments.
            </summary>
            <param name="start">Begins matching the given strings with this token.</param>
            <param name="values">The collection of strings to match against.</param>
            <returns>Returns true if the tokens match the collection of strings.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsTokenList.GetNextCodeToken(Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken})">
            <summary>
            Gets the next non-whitespace, non-comment token.
            </summary>
            <param name="start">The first token.</param>
            <returns>Returns the next code token or null if there is none.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsTokenList.MatchTokens(System.String[])">
            <summary>
            Determines whether the token list contains the given strings, skipping whitespace tokens and
            comments.
            </summary>
            <param name="values">The collection of strings to match against.</param>
            <returns>Returns true if the tokens match the collection of strings.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsTokenList.Trim">
            <summary>
            Removes whitespace and comments from the beginning and end of the token list.
            </summary>
            <returns>Returns the number of tokens that were trimmed from the beginning of the list.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsTokenList.Trim(Microsoft.StyleCop.CSharp.CsTokenType[])">
            <summary>
            Removes whitespace and comments from the beginning and end of the token list.
            </summary>
            <param name="types">The types to trim.</param>
            <returns>Returns the number of tokens that were trimmed from the beginning of the list.</returns>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Struct">
            <summary>
            Describes a struct element.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Struct.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.TypeParameterConstraintClause},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Struct class.
            </summary>
            <param name="document">The document that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="typeConstraints">The list of type constraints on the class, if any.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Struct.Initialize">
            <summary>
            Initializes the struct object.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Region">
            <summary>
            Describes a region directive.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Preprocessor">
            <summary>
            Describes a preprocessor directive.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Preprocessor.preprocessorType">
            <summary>
            The type of the preprocessor statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Preprocessor.#ctor(System.String,Microsoft.StyleCop.CSharp.CsTokenClass,Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the Preprocessor class.
            </summary>
            <param name="text">The line text.</param>
            <param name="tokenClass">The class of the token.</param>
            <param name="location">The location of the preprocessor in the code.</param>
            <param name="parent">The parent code part.</param>
            <param name="generated">Indicates whether the preprocessor lies within a block of generated code.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Preprocessor.#ctor(System.String,Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the Preprocessor class.
            </summary>
            <param name="text">The line text.</param>
            <param name="location">The location of the preprocessor in the code.</param>
            <param name="parent">The parent code part.</param>
            <param name="generated">Indicates whether the preprocessor lies within a block of generated code.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Preprocessor.PreprocessorType">
            <summary>
            Gets the type of the preprocessor directive.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Region.beginning">
            <summary>
            Indicates whether this is a beginning region.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Region.partner">
            <summary>
            The partner of this region tag.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Region.#ctor(System.String,Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Region class.
            </summary>
            <param name="text">The line text.</param>
            <param name="location">The location of the preprocessor in the code.</param>
            <param name="parent">The parent of the region.</param>
            <param name="beginning">Indicates whether this is a beginning region.</param>
            <param name="generated">Indicates whether the preprocessor lies within a block of generated code.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Region.Beginning">
            <summary>
            Gets a value indicating whether this is the beginning of a region block.
            </summary>
            <remarks>A value of false indicates that this is an endregion tag.</remarks>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Region.Partner">
            <summary>
            Gets the partner of this region tag.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Region.IsGeneratedCodeRegion">
            <summary>
            Gets a value indicating whether this is the start of a generated code block.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ConditionalCompilationDirective">
            <summary>
            Describes a conditional compilation directive token.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConditionalCompilationDirective.type">
            <summary>
            The type of the directive.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConditionalCompilationDirective.body">
            <summary>
            The expression that makes up the body of the directive.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ConditionalCompilationDirective.#ctor(System.String,Microsoft.StyleCop.CSharp.ConditionalCompilationDirectiveType,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the ConditionalCompilationDirective class.
            </summary>
            <param name="text">The line text.</param>
            <param name="type">The type of the directive.</param>
            <param name="body">The expression that makes up the body of the directive.</param>
            <param name="location">The location of the preprocessor in the code.</param>
            <param name="parent">The parent code part.</param>
            <param name="generated">Indicates whether the directive lies within a block of generated code.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ConditionalCompilationDirective.ConditionalCompilationDirectiveType">
            <summary>
            Gets the type of the conditional compilation directive.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ConditionalCompilationDirective.Body">
            <summary>
            Gets the expression that makes up the body of the directive.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ConstructorConstraint">
            <summary>
            A token describing a constructor constraint.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConstructorConstraint.childTokens">
            <summary>
            The list of child tokens within this token.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ConstructorConstraint.#ctor(Microsoft.StyleCop.MasterList{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the ConstructorConstraint class.
            </summary>
            <param name="childTokens">The list of child tokens that form the token.</param>
            <param name="location">The location of the token in the code.</param>
            <param name="parent">The parent of the token.</param>
            <param name="generated">True if the token is inside of a block of generated code.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ConstructorConstraint.CreateTextString">
            <summary>
            Creates a text string based on the child tokens in the token.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ConstructorConstraint.ChildTokens">
            <summary>
            Gets the list of child tokens within this token.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ConstructorConstraint.Microsoft#StyleCop#CSharp#ITokenContainer#Tokens">
            <summary>
            Gets the list of child tokens contained within this object.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ForeachStatement">
            <summary>
            A foreach-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ForeachStatement.variable">
            <summary>
            The variable declared in the foreach-statement declaration.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ForeachStatement.item">
            <summary>
            The item being interated over.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ForeachStatement.embeddedStatement">
            <summary>
            The statement that is embedded within this foreach-statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ForeachStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.VariableDeclarationExpression,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the ForeachStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="variable">The variable declared in foreach-statement declaration.</param>
            <param name="item">The item being iterated over.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ForeachStatement.Variable">
            <summary>
            Gets the variable declared in the foreach-statement declaration.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ForeachStatement.Item">
            <summary>
            Gets the item being iterated over.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ForeachStatement.EmbeddedStatement">
            <summary>
            Gets the statement that is embedded within this foreach-statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.SymbolManager">
            <summary>
            Provides support for reading through a symbol list.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolManager.symbols">
            <summary>
            The symbol list.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolManager.index">
            <summary>
            The current index into the list.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolManager.generatedCodeCount">
            <summary>
            Keeps a count of the number of generated blocks currently entered into.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SymbolManager.regions">
            <summary>
            Holds the region stack.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.SymbolManager.#ctor(System.Collections.Generic.List{Microsoft.StyleCop.CSharp.Symbol})">
            <summary>
            Initializes a new instance of the SymbolManager class.
            </summary>
            <param name="symbols">The list of symbols to manage.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.SymbolManager.Advance">
            <summary>
            Advances to the next index.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.SymbolManager.Peek(System.Int32)">
            <summary>
            Gets the symbol at the given location in the list, without advancing the current index.
            </summary>
            <param name="count">The number of indexes to jump ahead of the current index.</param>
            <returns>Returns the symbol or null if the end of the list has been exceeded.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.SymbolManager.IncrementGeneratedCodeBlocks">
            <summary>
            Increments the generated code blocks counter.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.SymbolManager.DecrementGeneratedCodeBlocks">
            <summary>
            Decrements the generated code blocks counter.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.SymbolManager.PushRegion(Microsoft.StyleCop.CSharp.Region)">
            <summary>
            Pushes a region onto the region stack.
            </summary>
            <param name="region">The region to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.SymbolManager.PopRegion">
            <summary>
            Pops a region from the region stack.
            </summary>
            <returns>Returns the popped region.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.SymbolManager.Combine(System.Int32,System.Int32,System.String,Microsoft.StyleCop.CSharp.SymbolType)">
            <summary>
            Combines a range of symbols into a single symbol.
            </summary>
            <param name="startIndex">The start peek index of the first symbol to combine.</param>
            <param name="endIndex">The end peek index of the last symbol to combine.</param>
            <param name="text">The text for the new symbol.</param>
            <param name="type">The type of the new symbol.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.SymbolManager.Generated">
            <summary>
            Gets a value indicating whether the symbol at the current index is within a generated code block.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.SymbolManager.Current">
            <summary>
            Gets the current symbol.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.SymbolManager.CurrentIndex">
            <summary>
            Gets or sets the current index.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.SymbolManager.Item(System.Int32)">
            <summary>
            Gets the symbol at the given index.
            </summary>
            <param name="symbolIndex">The index of the symbol to retrieve.</param>
            <returns>Returns the symbol at the given index.</returns>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Event">
            <summary>
            Describes an event element.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Event.eventHandlerType">
            <summary>
            The event handler type.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Event.add">
            <summary>
            The add accessor for the event.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Event.remove">
            <summary>
            The remove accessor for the event.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Event.eventDeclarators">
            <summary>
            Optional declarators for the event.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Event.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,Microsoft.StyleCop.CSharp.TypeToken,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.EventDeclaratorExpression},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Event class.
            </summary>
            <param name="document">The document that contains this element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="eventHandlerType">The type of the event handler.</param>
            <param name="eventDeclarators">Declarators for the event.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Event.Initialize">
            <summary>
            Initializes the contents of the event.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Event.EventHandlerType">
            <summary>
            Gets the event handler's return type.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Event.AddAccessor">
            <summary>
            Gets the add accessor for the event, if there is one.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Event.RemoveAccessor">
            <summary>
            Gets the remove accessor for the event, if there is one.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Event.Declarators">
            <summary>
            Gets the optional initialization expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.DecrementExpression">
            <summary>
            An expression representing a decrement operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.DecrementExpression.decrementType">
            <summary>
            The type of decrement being performed.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.DecrementExpression.value">
            <summary>
            The value being decremented.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.DecrementExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.DecrementExpression.DecrementType)">
            <summary>
            Initializes a new instance of the DecrementExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="value">The value being decremented.</param>
            <param name="decrementType">The type of decrement being performed.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.DecrementExpression.Type">
            <summary>
            Gets the type of decrement being performed.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.DecrementExpression.Value">
            <summary>
            Gets the value being decremented.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.DecrementExpression.DecrementType">
            <summary>
            The various types of decrement operations.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.DecrementExpression.DecrementType.Prefix">
            <summary>
            A prefix decrement: --x.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.DecrementExpression.DecrementType.Postfix">
            <summary>
            A postfix decrement: x--.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor`1">
            <summary>
            Delegate for a callback executed when an element is visited.
            </summary>
            <param name="element">The element being visited.</param>
            <param name="parentElement">The parent element, if any.</param>
            <param name="context">The optional visitor context data.</param>
            <returns>Returns true to continue, or false to stop the walker.</returns>
            <typeparam name="T">The type of the visitor context data.</typeparam>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor`1">
            <summary>
            Delegate for a callback executed when a statement is visited.
            </summary>
            <param name="statement">The statement being visited.</param>
            <param name="parentExpression">The parent expression, if any.</param>
            <param name="parentStatement">The parent statement, if any.</param>
            <param name="parentElement">The parent element, if any.</param>
            <param name="context">The optional visitor context data.</param>
            <returns>Returns true to continue, or false to stop the walker.</returns>
            <typeparam name="T">The type of the visitor context data.</typeparam>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor`1">
            <summary>
            Delegate for a callback executed when an expression is visited.
            </summary>
            <param name="expression">The expression being visited.</param>
            <param name="parentExpression">The parent expression, if any.</param>
            <param name="parentStatement">The parent statement, if any.</param>
            <param name="parentElement">The parent element, if any.</param>
            <param name="context">The optional visitor context data.</param>
            <returns>Returns true to continue, or false to stop the walker.</returns>
            <typeparam name="T">The type of the visitor context data.</typeparam>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor`1">
            <summary>
            Delegate for a callback executed when a query clause is visited.
            </summary>
            <param name="clause">The query clause being visited.</param>
            <param name="parentClause">The parent query clause, if any.</param>
            <param name="parentExpression">The parent expression, if any.</param>
            <param name="parentStatement">The parent statement, if any.</param>
            <param name="parentElement">The parent element, if any.</param>
            <param name="context">The optional visitor context data.</param>
            <returns>Returns true to continue, or false to stop the walker.</returns>
            <typeparam name="T">The type of the visitor context data.</typeparam>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CodeWalker`1">
            <summary>
            Walks through the code object model.
            </summary>
            <typeparam name="T">The type of the visitor context data.</typeparam>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeWalker`1.elementCallback">
            <summary>
            Callback executed when an element is visited.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeWalker`1.statementCallback">
            <summary>
            Callback executed when a statement is visited.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeWalker`1.expressionCallback">
            <summary>
            Callback executed when an expression is visited.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeWalker`1.queryClauseCallback">
            <summary>
            Callback executed when a query clause is visited.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{`0},`0)">
            <summary>
            Initializes a new instance of the CodeWalker class.
            </summary>
            <param name="document">The document to walk through.</param>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.#ctor(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{`0},`0)">
            <summary>
            Initializes a new instance of the CodeWalker class.
            </summary>
            <param name="element">The element to walk through.</param>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.#ctor(Microsoft.StyleCop.CSharp.Statement,Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{`0},`0)">
            <summary>
            Initializes a new instance of the CodeWalker class.
            </summary>
            <param name="statement">The statement to walk through.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.#ctor(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{`0},`0)">
            <summary>
            Initializes a new instance of the CodeWalker class.
            </summary>
            <param name="expression">The expression to walk through.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.#ctor(Microsoft.StyleCop.CSharp.QueryClause,Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{`0},`0)">
            <summary>
            Initializes a new instance of the CodeWalker class.
            </summary>
            <param name="queryClause">The query clause to walk through.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.Start(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{`0},`0)">
            <summary>
            Creates and starts a code walker.
            </summary>
            <param name="document">The document to walk through.</param>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.Start(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{`0},`0)">
            <summary>
            Creates and starts a code walker.
            </summary>
            <param name="element">The element to walk through.</param>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.Start(Microsoft.StyleCop.CSharp.Statement,Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{`0},`0)">
            <summary>
            Creates and starts a code walker.
            </summary>
            <param name="statement">The statement to walk through.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.Start(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{`0},`0)">
            <summary>
            Creates and starts a code walker.
            </summary>
            <param name="expression">The expression to walk through.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.Start(Microsoft.StyleCop.CSharp.QueryClause,Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{`0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{`0},`0)">
            <summary>
            Creates and starts a code walker.
            </summary>
            <param name="queryClause">The query clause to walk through.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.WalkElement(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.CsElement,`0)">
            <summary>
            Walks the children of the given element.
            </summary>
            <param name="element">The element.</param>
            <param name="parentElement">The parent element, if any.</param>
            <param name="context">The optional visitor context data.</param>
            <returns>Returns true to continue, or false to stop the walker.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.WalkStatement(Microsoft.StyleCop.CSharp.Statement,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Statement,Microsoft.StyleCop.CSharp.CsElement,`0)">
            <summary>
            Walks the children of the given statement.
            </summary>
            <param name="statement">The statement.</param>
            <param name="parentExpression">The parent expression, if any.</param>
            <param name="parentStatement">The parent statement, if any.</param>
            <param name="parentElement">The parent element, if any.</param>
            <param name="context">The optional visitor context data.</param>
            <returns>Returns true to continue, or false to stop the walker.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.WalkExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Statement,Microsoft.StyleCop.CSharp.CsElement,`0)">
            <summary>
            Walks the children of the given expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="parentExpression">The parent expression, if any.</param>
            <param name="parentStatement">The parent statement, if any.</param>
            <param name="parentElement">The parent element, if any.</param>
            <param name="context">The optional visitor context data.</param>
            <returns>Returns true to continue, or false to stop the walker.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.WalkQueryClause(Microsoft.StyleCop.CSharp.QueryClause,Microsoft.StyleCop.CSharp.QueryClause,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Statement,Microsoft.StyleCop.CSharp.CsElement,`0)">
            <summary>
            Walks the children of the given query clause.
            </summary>
            <param name="clause">The clause.</param>
            <param name="parentClause">The parent clause, if any.</param>
            <param name="parentExpression">The parent expression, if any.</param>
            <param name="parentStatement">The parent statement, if any.</param>
            <param name="parentElement">The parent element, if any.</param>
            <param name="context">The optional visitor context data.</param>
            <returns>Returns true to continue, or false to stop the walker.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.VisitElement(Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.CsElement,`0@)">
            <summary>
            Delegate for a callback executed when an element is visited.
            </summary>
            <param name="element">The element being visited.</param>
            <param name="parentElement">The parent element, if any.</param>
            <param name="context">The optional visitor context data.</param>
            <returns>Returns true to continue, or false to stop the walker.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.VisitStatement(Microsoft.StyleCop.CSharp.Statement,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Statement,Microsoft.StyleCop.CSharp.CsElement,`0@)">
            <summary>
            Delegate for a callback executed when a statement is visited.
            </summary>
            <param name="statement">The statement being visited.</param>
            <param name="parentExpression">The parent expression, if any.</param>
            <param name="parentStatement">The parent statement, if any.</param>
            <param name="parentElement">The parent element, if any.</param>
            <param name="context">The optional visitor context data.</param>
            <returns>Returns true to continue, or false to stop the walker.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.VisitExpression(Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Statement,Microsoft.StyleCop.CSharp.CsElement,`0@)">
            <summary>
            Delegate for a callback executed when an expression is visited.
            </summary>
            <param name="expression">The expression being visited.</param>
            <param name="parentExpression">The parent expression, if any.</param>
            <param name="parentStatement">The parent statement, if any.</param>
            <param name="parentElement">The parent element, if any.</param>
            <param name="context">The optional visitor context data.</param>
            <returns>Returns true to continue, or false to stop the walker.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeWalker`1.VisitQueryClause(Microsoft.StyleCop.CSharp.QueryClause,Microsoft.StyleCop.CSharp.QueryClause,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Statement,Microsoft.StyleCop.CSharp.CsElement,`0@)">
            <summary>
            Delegate for a callback executed when a query clause is visited.
            </summary>
            <param name="clause">The query clause being visited.</param>
            <param name="parentClause">The parent query clause, if any.</param>
            <param name="parentExpression">The parent expression, if any.</param>
            <param name="parentStatement">The parent statement, if any.</param>
            <param name="parentElement">The parent element, if any.</param>
            <param name="context">The optional visitor context data.</param>
            <returns>Returns true to continue, or false to stop the walker.</returns>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.XmlHeader">
            <summary>
            Represents an Xml element header.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.XmlHeader.childTokens">
            <summary>
            The list of tokens in the header.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.XmlHeader.element">
            <summary>
            The element that this header is attached to.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.XmlHeader.rawText">
            <summary>
            The text string with formatting still in place.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.XmlHeader.#ctor(Microsoft.StyleCop.MasterList{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the XmlHeader class.
            </summary>
            <param name="childTokens">The list of tokens in the header.</param>
            <param name="location">The location of the header within the code.</param>
            <param name="parent">The parent of the header.</param>
            <param name="generated">Indicates whether the header resides within generated code.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.XmlHeader.CreateTextString">
            <summary>
            Creates a text string from the contents of the header.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.XmlHeader.ExtractTextFromHeaderLine(System.String)">
            <summary>
            Extracts the header text from the header line.
            </summary>
            <param name="originalText">The original header line text.</param>
            <returns>Returns the extracted text.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.XmlHeader.CreateRawTextString">
            <summary>
            Creates a raw text string with whitespace and newlines left in place.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.XmlHeader.ChildTokens">
            <summary>
            Gets the list of tokens in the header.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.XmlHeader.Element">
            <summary>
            Gets the element that this header is attached to, if any.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.XmlHeader.RawText">
            <summary>
            Gets the contents of the header with whitespace, newlines, and formatting left in place.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.XmlHeader.Microsoft#StyleCop#CSharp#ITokenContainer#Tokens">
            <summary>
            Gets the list of child tokens contained within this object.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CsDocument">
            <summary>
            Represents a parsed C# document.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsDocument.contents">
            <summary>
            The contents at the root of the document.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsDocument.tokens">
            <summary>
            The list of tokens in the document.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsDocument.fileHeader">
            <summary>
            The file header.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsDocument.parser">
            <summary>
            The parser that created this object.
            </summary>        
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsDocument.#ctor(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CSharp.CsParser,Microsoft.StyleCop.MasterList{Microsoft.StyleCop.CSharp.CsToken})">
            <summary>
            Initializes a new instance of the CsDocument class.
            </summary>
            <param name="sourceCode">The source code that this document represents.</param>
            <param name="parser">The parser that is creating this object.</param>
            <param name="tokens">The tokens in the document.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsDocument.#ctor(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CSharp.CsParser)">
            <summary>
            Initializes a new instance of the CsDocument class.
            </summary>
            <param name="sourceCode">The source code that this document represents.</param>
            <param name="parser">The parser that is creating this object.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsDocument.WalkDocument``1(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{``0},``0)">
            <summary>
            Walks through the code units in the document.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsDocument.WalkDocument``1(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{``0},``0)">
            <summary>
            Walks through the code units in the document.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsDocument.WalkDocument``1(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{``0},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{``0},``0)">
            <summary>
            Walks through the code units in the document.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsDocument.WalkDocument``1(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{``0},``0)">
            <summary>
            Walks through the code units in the document.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="context">The optional visitor context data.</param>
            <typeparam name="T">The type of the context item.</typeparam>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsDocument.WalkDocument(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerQueryClauseVisitor{System.Object})">
            <summary>
            Walks through the code units in the document.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
            <param name="queryClauseCallback">Callback executed when a query clause is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsDocument.WalkDocument(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerExpressionVisitor{System.Object})">
            <summary>
            Walks through the code units in the document.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
            <param name="expressionCallback">Callback executed when an expression is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsDocument.WalkDocument(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{System.Object},Microsoft.StyleCop.CSharp.CodeWalkerStatementVisitor{System.Object})">
            <summary>
            Walks through the code units in the document.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
            <param name="statementCallback">Callback executed when a statement is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsDocument.WalkDocument(Microsoft.StyleCop.CSharp.CodeWalkerElementVisitor{System.Object})">
            <summary>
            Walks through the code units in the document.
            </summary>
            <param name="elementCallback">Callback executed when an element is visited.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsDocument.Dispose(System.Boolean)">
            <summary>
            Disposes the contents of the class.
            </summary>
            <param name="disposing">Indicates whether to dispose unmanaged resources.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsDocument.DocumentContents">
            <summary>
            Gets the contents of the document at the root level.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsDocument.Tokens">
            <summary>
            Gets the list of tokens in the document.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsDocument.RootElement">
            <summary>
            Gets the root element for this document.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsDocument.FileHeader">
            <summary>
            Gets the file header, if any.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsDocument.Parser">
            <summary>
            Gets the parser that created this document.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsDocument.Parent">
            <summary>
            Gets the parent of the document.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsDocument.Location">
            <summary>
            Gets the location of the document.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsDocument.LineNumber">
            <summary>
            Gets the line number on which the document begins.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsDocument.CodePartType">
            <summary>
            Gets the type of this code part.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsDocument.Microsoft#StyleCop#CSharp#ITokenContainer#Tokens">
            <summary>
            Gets the list of child tokens contained within this object.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsDocument.MasterTokenList">
            <summary>
            Gets a reference to a writable version of the token list for this document.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CsTokenType">
            <summary>
            The various <see cref="T:Microsoft.StyleCop.CSharp.CsToken"/> types from a C# document.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.OpenParenthesis">
            <summary>
            An open parenthesis: '('.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.CloseParenthesis">
            <summary>
            A close parenthesis: ')'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.OpenCurlyBracket">
            <summary>
            An opening curly bracket: '{'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.CloseCurlyBracket">
            <summary>
            A closing curly bracket: '}'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.OpenSquareBracket">
            <summary>
            An open square bracket: '['.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.CloseSquareBracket">
            <summary>
            A close square bracket: ']'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.OpenGenericBracket">
            <summary>
            The opening bracket in a generic statement (a less-than sign).
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.CloseGenericBracket">
            <summary>
            The closing bracket in a generic statement (a greater-than sign).
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.OperatorSymbol">
            <summary>
            An operator symbol.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.BaseColon">
            <summary>
            A colon preceding a base class initialization.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.WhereColon">
            <summary>
            A colon in a 'where' statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.AttributeColon">
            <summary>
            A colon in an attribute.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.LabelColon">
            <summary>
            A colon after a label, case, or default keyword.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Comma">
            <summary>
            A comma: ','.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Semicolon">
            <summary>
            A semicolon ending a line of code: ';'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.NullableTypeSymbol">
            <summary>
            A nullable-type symbol: '?'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Abstract">
            <summary>
            The keyword 'abstract'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Add">
            <summary>
            The keyword 'add'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Alias">
            <summary>
            The keyword 'alias'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.As">
            <summary>
            The keyword 'as'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Ascending">
            <summary>
            The keyword 'ascending'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Base">
            <summary>
            The keyword 'base'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Break">
            <summary>
            The keyword 'break'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.By">
            <summary>
            The keyword 'by'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Case">
            <summary>
            The keyword 'case'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Catch">
            <summary>
            The keyword 'catch'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Checked">
            <summary>
            The keyword 'checked'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Class">
            <summary>
            The keyword 'class'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Const">
            <summary>
            The keyword 'const'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Continue">
            <summary>
            The keyword 'continue'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Default">
            <summary>
            The keyword 'default', as used in a switch statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.DefaultValue">
            <summary>
            The keyword 'default', as used in a default-value expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Delegate">
            <summary>
            The keyword 'delegate'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Descending">
            <summary>
            The keyword 'descending'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Do">
            <summary>
            The keyword 'do'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Else">
            <summary>
            The keyword 'else'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Enum">
            <summary>
            The keyword 'enum'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Equals">
            <summary>
            The keyword 'equals'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Event">
            <summary>
            The keyword 'event'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Explicit">
            <summary>
            The keyword 'explicit'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Extern">
            <summary>
            The keyword 'extern' in a method declaration.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.ExternDirective">
            <summary>
            The keyword 'extern' in an extern alias directive.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.False">
            <summary>
            The keyword 'false'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Finally">
            <summary>
            The keyword 'finally'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Fixed">
            <summary>
            The keyword 'fixed'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.For">
            <summary>
            The keyword 'for'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Foreach">
            <summary>
            The keyword 'foreach'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.From">
            <summary>
            The keyword 'from'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Get">
            <summary>
            The keyword 'get'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Goto">
            <summary>
            The keyword 'goto'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Group">
            <summary>
            The keyword 'group'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.If">
            <summary>
            The keyword 'if'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Implicit">
            <summary>
            The keyword 'implicit'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.In">
            <summary>
            The keyword 'in'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Interface">
            <summary>
            The keyword 'interface'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Internal">
            <summary>
            The keyword 'internal'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Into">
            <summary>
            The keyword 'into'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Is">
            <summary>
            The keyword 'is'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Join">
            <summary>
            The keyword 'join'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Let">
            <summary>
            The keyword 'let'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Lock">
            <summary>
            The keyword 'lock'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Namespace">
            <summary>
            The keyword 'namespace'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.New">
            <summary>
            The keyword 'new'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Null">
            <summary>
            The keyword 'null'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.On">
            <summary>
            The keyword 'on'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Operator">
            <summary>
            The keyword 'operator'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.OrderBy">
            <summary>
            The keyword 'orderby'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Out">
            <summary>
            The keyword 'out'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Override">
            <summary>
            The keyword 'override'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Params">
            <summary>
            The keyword 'params'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Partial">
            <summary>
            The keyword 'partial'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Private">
            <summary>
            The keyword 'private'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Protected">
            <summary>
            The keyword 'protected'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Public">
            <summary>
            The keyword 'public'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Readonly">
            <summary>
            The keyword 'readonly'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Ref">
            <summary>
            The keyword 'ref'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Remove">
            <summary>
            The keyword 'remove'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Return">
            <summary>
            The keyword 'return'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Sealed">
            <summary>
            The keyword 'sealed'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Select">
            <summary>
            The keyword 'select'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Set">
            <summary>
            The keyword 'set'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Sizeof">
            <summary>
            The keyword 'sizeof'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Stackalloc">
            <summary>
            The keyword 'stackalloc'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Static">
            <summary>
            The keyword 'static'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Struct">
            <summary>
            The keyword 'struct'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Switch">
            <summary>
            The keyword 'switch'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.This">
            <summary>
            The keyword 'this'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Throw">
            <summary>
            The keyword 'throw'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.True">
            <summary>
            The keyword 'true'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Try">
            <summary>
            The keyword 'try'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Typeof">
            <summary>
            The keyword 'typeof'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Unchecked">
            <summary>
            The keyword 'unchecked'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Unsafe">
            <summary>
            The keyword 'unsafe'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Using">
            <summary>
            The keyword 'using' in a using-statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.UsingDirective">
            <summary>
            The keyword 'using' in a using-directive.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Virtual">
            <summary>
            The keyword 'virtual'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Volatile">
            <summary>
            The keyword 'volatile'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Where">
            <summary>
            The keyword 'where'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.While">
            <summary>
            The keyword 'while'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.WhileDo">
            <summary>
            The keyword 'while' at the end of a do/while statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Yield">
            <summary>
            The keyword 'yield'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Other">
            <summary>
            An unknown token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.WhiteSpace">
            <summary>
            A group of whitespace.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.EndOfLine">
            <summary>
            An end-of-line character.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.String">
            <summary>
            A string constant.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Number">
            <summary>
            A number constant.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.SingleLineComment">
            <summary>
            A single-line comment.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.MultiLineComment">
            <summary>
            A multi-line comment.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.PreprocessorDirective">
            <summary>
            A preprocessor directive.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.Attribute">
            <summary>
            An element or assembly attribute.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.OpenAttributeBracket">
            <summary>
            A square bracket opening an attribute.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.CloseAttributeBracket">
            <summary>
            A square bracket closing an attribute.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.XmlHeader">
            <summary>
            An Xml header.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.XmlHeaderLine">
            <summary>
            A line within an Xml header.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenType.DestructorTilde">
            <summary>
            The tilde before the name of a destructor.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.OperatorType">
            <summary>
            The various operator types.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.ConditionalEquals">
            <summary>
            A conditional equals symbol: '=='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.NotEquals">
            <summary>
            A NOT equals symbol: '!='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.LessThan">
            <summary>
            A less-then sign.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.GreaterThan">
            <summary>
            A greater-than sign.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.LessThanOrEquals">
            <summary>
            A less than or equals sign.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.GreaterThanOrEquals">
            <summary>
            A greater than or equals sign.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.LogicalAnd">
            <summary>
            A logical AND symbol.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.LogicalOr">
            <summary>
            A logical OR symbol: '|'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.LogicalXor">
            <summary>
            A logical XOR symbol: '^'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.ConditionalAnd">
            <summary>
            A conditional AND symbol.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.ConditionalOr">
            <summary>
            A conditional OR symbol: '||'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.NullCoalescingSymbol">
            <summary>
            A null coalescing symbol: '??'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.Equals">
            <summary>
            An equals sign: '='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.PlusEquals">
            <summary>
            A plus equals symbol: '+='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.MinusEquals">
            <summary>
            A minus equals symbol: '-='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.MultiplicationEquals">
            <summary>
            A times equals symbol: '*='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.DivisionEquals">
            <summary>
            A divide equals symbol: '/='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.LeftShiftEquals">
            <summary>
            A left-shift equals sign.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.RightShiftEquals">
            <summary>
            A right-shift equals sign.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.AndEquals">
            <summary>
            An AND equals symbol.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.OrEquals">
            <summary>
            An OR equals symbol: '|='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.XorEquals">
            <summary>
            An XOR equals symbol: '^='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.Plus">
            <summary>
            A plus sign: '+'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.Minus">
            <summary>
            A minus sign: '-'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.Multiplication">
            <summary>
            A multiplication sign: '*'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.Division">
            <summary>
            A division sign: '/'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.Mod">
            <summary>
            A MOD symbol: '%'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.ModEquals">
            <summary>
            A MOD equals symbol: '%='.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.LeftShift">
            <summary>
            A left-shift symbol.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.RightShift">
            <summary>
            A right-shift symbol.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.ConditionalColon">
            <summary>
            A colon: ':'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.ConditionalQuestionMark">
            <summary>
            A question mark: '?'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.Increment">
            <summary>
            An increment symbol: '++'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.Decrement">
            <summary>
            A decrement symbol: '--'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.Not">
            <summary>
            A NOT symbol: '!'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.BitwiseCompliment">
            <summary>
            A tilde symbol: '~'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.Positive">
            <summary>
            A positive sign: '+'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.Negative">
            <summary>
            A negative sign: '-'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.Dereference">
            <summary>
            A dereference symbol: '*'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.AddressOf">
            <summary>
            An address-of symbol.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.Pointer">
            <summary>
            A pointer symbol: '->'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.MemberAccess">
            <summary>
            A member access operator: '.'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.QualifiedAlias">
            <summary>
            A qualified alias operator: '::'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorType.Lambda">
            <summary>
            The lambda operator: =>
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Bracket">
            <summary>
            Describes one curly bracket, square bracket, parenthesis,
            attribute bracket, or generic bracket.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Bracket.matchingBracketNode">
            <summary>
            The matching bracket.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Bracket.#ctor(System.String,Microsoft.StyleCop.CSharp.CsTokenType,Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the Bracket class.
            </summary>
            <param name="text">The token string.</param>
            <param name="tokenType">The token type.</param>
            <param name="location">The location of the token within the code document.</param>
            <param name="parent">The parent code part.</param>
            <param name="generated">True if the token is inside of a block of generated code.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Bracket.MatchingBracket">
            <summary>
            Gets the matching bracket, if there is one.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Bracket.MatchingBracketNode">
            <summary>
            Gets the matching bracket node, if there is one.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CsTokenClass">
            <summary>
            The varies token classes.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenClass.Attribute">
            <summary>
            An attribute token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenClass.GenericType">
            <summary>
            A generic type token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenClass.Number">
            <summary>
            A number token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenClass.PreprocessorDirective">
            <summary>
            A preprocessor directive token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenClass.RegionDirective">
            <summary>
            A region directive token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenClass.ConditionalCompilationDirective">
            <summary>
            A conditional compilation directive token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenClass.Type">
            <summary>
            A type token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenClass.Whitespace">
            <summary>
            A whitespace token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenClass.XmlHeader">
            <summary>
            An Xml header token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenClass.OperatorSymbol">
            <summary>
            An operator symbol token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenClass.Bracket">
            <summary>
            A curly bracket, square bracket, parenthesis, attribute bracket, or generic bracket.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenClass.ConstructorConstraint">
            <summary>
            A constructor constraint token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsTokenClass.Token">
            <summary>
            A standard token.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.SwitchStatement">
            <summary>
            A switch-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SwitchStatement.switchItem">
            <summary>
            The expression to switch off of.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SwitchStatement.caseStatements">
            <summary>
            The list of case statements under the switch statements.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SwitchStatement.defaultStatement">
            <summary>
            The default statement under the switch statement, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.SwitchStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.SwitchCaseStatement},Microsoft.StyleCop.CSharp.SwitchDefaultStatement)">
            <summary>
            Initializes a new instance of the SwitchStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="switchItem">The expression to switch off of.</param>
            <param name="caseStatements">The list of case statements under the switch statement.</param>
            <param name="defaultStatement">The default statement under the switch statement.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.SwitchStatement.SwitchItem">
            <summary>
            Gets the expression to switch off of.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.SwitchStatement.CaseStatements">
            <summary>
            Gets the list of case statements under the switch statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.SwitchStatement.DefaultStatement">
            <summary>
            Gets the default statement under the switch statement, if there is one.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.BlockStatement">
            <summary>
            A statement representing a new scope block.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.BlockStatement.#ctor">
            <summary>
            Initializes a new instance of the BlockStatement class.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.EmptyElement">
            <summary>
            Describes an element consisting only of a single semicolon.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.EmptyElement.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Declaration,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmptyElement class.
            </summary>
            <param name="document">The documenent that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.QueryExpression">
            <summary>
            An expression representing a query.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryExpression.clauses">
            <summary>
            The list of clauses in the expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.QueryClause})">
            <summary>
            Initializes a new instance of the QueryExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="clauses">The collection of clauses in the expression.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryExpression.InitializeFromClauses(System.Collections.Generic.IEnumerable{Microsoft.StyleCop.CSharp.QueryClause})">
            <summary>
            Initializes the expression from the list of clauses.
            </summary>
            <param name="items">The list of clauses in the expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryExpression.ChildClauses">
            <summary>
            Gets the list of query clauses within this expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.AccessorType">
            <summary>
            The various types of accessors for properties, indexers and events.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AccessorType.Get">
            <summary>
            A get accessor within a property or indexer.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AccessorType.Set">
            <summary>
            A set accessor within a property or indexer.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AccessorType.Add">
            <summary>
            An add accessor within an event.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AccessorType.Remove">
            <summary>
            A remove accessor within an event.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.FileHeader">
            <summary>
            Describes the header at the top of a C# file.
            </summary>
            <subcategory>other</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.FileHeader.generated">
            <summary>
            Indicates whether the file header has the generated attribute.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.FileHeader.headerText">
            <summary>
            The header text.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.FileHeader.headerXml">
            <summary>
            The header text wrapped into an Xml tag.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.FileHeader.parent">
            <summary>
            The parent of the file header.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.FileHeader.tokens">
            <summary>
            The collection of tokens in the header.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.FileHeader.location">
            <summary>
            The location of the header.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.FileHeader.#ctor(System.String,Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart})">
            <summary>
            Initializes a new instance of the FileHeader class.
            </summary>
            <param name="headerText">The header text.</param>
            <param name="tokens">The collection of tokens in the header.</param>
            <param name="parent">The parent of the header.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.FileHeader.CodePartType">
            <summary>
            Gets the type of this code part.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.FileHeader.Generated">
            <summary>
            Gets a value indicating whether the file header contains the auto-generated attribute.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.FileHeader.HeaderText">
            <summary>
            Gets the header text.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.FileHeader.HeaderXml">
            <summary>
            Gets the header text string modified such that it is loadable into
            an <see cref="T:System.Xml.XmlDocument"/> object.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.FileHeader.Parent">
            <summary>
            Gets the parent of the file header.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.FileHeader.Tokens">
            <summary>
            Gets the collection of tokens that form the header.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.FileHeader.LineNumber">
            <summary>
            Gets the line number on which the header begins.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.FileHeader.Location">
            <summary>
            Gets the location of the token.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.DocumentRoot">
            <summary>
            An element which represents the root level of a document.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Namespace">
            <summary>
            Describes a namespace element.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Namespace.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Namespace class.
            </summary>
            <param name="document">The document that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Namespace.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.ElementType,System.String,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Namespace class.
            </summary>
            <param name="document">The document that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="type">The element type.</param>
            <param name="name">The name of this element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.DocumentRoot.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.Declaration,System.Boolean)">
            <summary>
            Initializes a new instance of the DocumentRoot class.
            </summary>
            <param name="document">The document that this element belongs to.</param>
            <param name="declaration">The decleration class for this element.</param>
            <param name="generated">Indicates whether the element contains generated code.</param>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Parameter">
            <summary>
            Describes a single method parameter.
            </summary>
            <subcategory>other</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Parameter.EmptyParameterArray">
            <summary>
            An empty array of parameters.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Parameter.location">
            <summary>
            The location of the parameter.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Parameter.type">
            <summary>
            The parameter type.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Parameter.name">
            <summary>
            The parameter name.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Parameter.modifiers">
            <summary>
            The parameter modifiers, if any.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Parameter.tokens">
            <summary>
            The tokens that make up the parameter.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Parameter.generated">
            <summary>
            Indicates whether the parameter is located within a block of generated code.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Parameter.defaultArgument">
            <summary>
            The optional default argument for the parameter.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Parameter.parent">
            <summary>
            The parent of the parameter.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Parameter.#ctor(Microsoft.StyleCop.CSharp.TypeToken,System.String,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.CSharp.ParameterModifiers,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.CsTokenList,System.Boolean)">
            <summary>
            Initializes a new instance of the Parameter class.
            </summary>
            <param name="type">The type of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="parent">The parent of the parameter.</param>
            <param name="modifiers">Modifers applied to this parameter.</param>
            <param name="defaultArgument">The optional default argument for the parameter.</param>
            <param name="location">The location of the parameter in the code.</param>
            <param name="tokens">The tokens that form the parameter.</param>
            <param name="generated">Indicates whether the parameter is located within a block of generated code.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Parameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Parameter.Parent">
            <summary>
            Gets the parent of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Parameter.CodePartType">
            <summary>
            Gets the type of this code part.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Parameter.Type">
            <summary>
            Gets the parameter type.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Parameter.Modifiers">
            <summary>
            Gets the modifiers applied to this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Parameter.DefaultArgument">
            <summary>
            Gets the optional default argument for the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Parameter.Location">
            <summary>
            Gets the location of the parameter in the code.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Parameter.LineNumber">
            <summary>
            Gets the line number that the parameter appears on in the code.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Parameter.Tokens">
            <summary>
            Gets the tokens that form the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Parameter.Generated">
            <summary>
            Gets a value indicating whether the parameter is located within a block of generated code.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Interface">
            <summary>
            Describes an interface element.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Interface.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.TypeParameterConstraintClause},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Interface class.
            </summary>
            <param name="document">The document that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="typeConstraints">The list of type constraints on the class, if any.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Interface.Initialize">
            <summary>
            Initializes the interface object.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.LiteralExpression">
            <summary>
            An expression representing a literal.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.LiteralExpression.tokenNode">
            <summary>
            The literal token node.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.LiteralExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken})">
            <summary>
            Initializes a new instance of the LiteralExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="tokenNode">The literal token node.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.LiteralExpression.#ctor(Microsoft.StyleCop.MasterList{Microsoft.StyleCop.CSharp.CsToken},Microsoft.StyleCop.Node{Microsoft.StyleCop.CSharp.CsToken})">
            <summary>
            Initializes a new instance of the LiteralExpression class.
            </summary>
            <param name="masterList">The master token list for the document containing the expression.</param>
            <param name="tokenNode">The literal token represented by the expression.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.LiteralExpression.ToString">
            <summary>
            Gets the contents of the expression as a string.
            </summary>
            <returns>Returns the string.</returns>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.LiteralExpression.Token">
            <summary>
            Gets the literal token.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.LiteralExpression.TokenNode">
            <summary>
            Gets the literal token node.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ConditionalLogicalExpression">
            <summary>
            An expression representing a conditional logical operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConditionalLogicalExpression.operatorType">
            <summary>
            The type of condition being performed.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConditionalLogicalExpression.leftHandSide">
            <summary>
            The left hand size of the expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConditionalLogicalExpression.rightHandSide">
            <summary>
            The right hand size of the expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ConditionalLogicalExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.ConditionalLogicalExpression.Operator,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the ConditionalLogicalExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="operatorType">The type of operation being performed.</param>
            <param name="leftHandSide">The left hand side of the expression.</param>
            <param name="rightHandSide">The right hand side of the expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ConditionalLogicalExpression.OperatorType">
            <summary>
            Gets the type of operation being performed.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ConditionalLogicalExpression.LeftHandSide">
            <summary>
            Gets the left hand side of the expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ConditionalLogicalExpression.RightHandSide">
            <summary>
            Gets the right hand side of the expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ConditionalLogicalExpression.Operator">
            <summary>
            The various operator types.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConditionalLogicalExpression.Operator.Or">
            <summary>
            The OR operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConditionalLogicalExpression.Operator.And">
            <summary>
            The AND operator.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CheckedExpression">
            <summary>
            An expression representing a checked operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CheckedExpression.internalExpression">
            <summary>
            The expression wrapped within the checked expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CheckedExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the CheckedExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="internalExpression">The expression wrapped within the checked expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CheckedExpression.InternalExpression">
            <summary>
            Gets the expression wrapped within this checked expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.AssignmentExpression">
            <summary>
            An expression representing an assignment operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AssignmentExpression.operatorType">
            <summary>
            The type of operator being performed.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AssignmentExpression.leftHandSide">
            <summary>
            The left hand size of the expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AssignmentExpression.rightHandSide">
            <summary>
            The right hand size of the expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.AssignmentExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.AssignmentExpression.Operator,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the AssignmentExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="operatorType">The type of operation being performed.</param>
            <param name="leftHandSide">The left hand side of the expression.</param>
            <param name="rightHandSide">The right hand side of the expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.AssignmentExpression.OperatorType">
            <summary>
            Gets the type of assignment being performed.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.AssignmentExpression.LeftHandSide">
            <summary>
            Gets the left hand side of the expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.AssignmentExpression.RightHandSide">
            <summary>
            Gets the right hand side of the expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.AssignmentExpression.Operator">
            <summary>
            The various assigment operator types.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AssignmentExpression.Operator.Equals">
            <summary>
            The = operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AssignmentExpression.Operator.PlusEquals">
            <summary>
            The += operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AssignmentExpression.Operator.MinusEquals">
            <summary>
            The -= operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AssignmentExpression.Operator.MultiplicationEquals">
            <summary>
            The *= operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AssignmentExpression.Operator.DivisionEquals">
            <summary>
            The /= operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AssignmentExpression.Operator.ModEquals">
            <summary>
            The %= operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AssignmentExpression.Operator.OrEquals">
            <summary>
            The |= operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AssignmentExpression.Operator.AndEquals">
            <summary>
            The and-equals operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AssignmentExpression.Operator.XorEquals">
            <summary>
            The exclusive-or operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AssignmentExpression.Operator.LeftShiftEquals">
            <summary>
            The left-shift equals operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AssignmentExpression.Operator.RightShiftEquals">
            <summary>
            The right-shift equals operator.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.QueryFromClause">
            <summary>
            Describes a from clause in a query expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryFromClause.rangeVariable">
            <summary>
            The variable that ranges over the values in the query result.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryFromClause.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Variable,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the QueryFromClause class.
            </summary>
            <param name="tokens">The list of tokens that form the clause.</param>
            <param name="rangeVariable">The variable that ranges over the values in the query result.</param>
            <param name="expression">The range expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryFromClause.RangeVariable">
            <summary>
            Gets the variable that ranges over the values in the query result.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CsParser">
            <summary>
            Parses a C# code file.
            </summary>
            <exclude />
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsParser.AnalyzeDesignerFilesProperty">
            <summary>
            The name of the settings property indicating whether to analyze designer files.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsParser.AnalyzeGeneratedFilesProperty">
            <summary>
            The name of the settings property indicating whether to analyze generated files.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsParser.GeneratedFileFiltersProperty">
            <summary>
            The name of the settings property which contains the list of filter filters.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsParser.DefaultGeneratedFileFilters">
            <summary>
            The default collection of generated file filters.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsParser.partialElements">
            <summary>
            Stores the collection of partial elements found while parsing the files.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsParser.suppressions">
            <summary>
            Stores collection of suppressions for individual elements.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CsParser.suppressionsLock">
            <summary>
            Lock object for suppressions dictionary
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsParser.#ctor">
            <summary>
            Initializes a new instance of the CsParser class.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsParser.ParseFile(Microsoft.StyleCop.SourceCode,System.Int32,Microsoft.StyleCop.CodeDocument@)">
            <summary>
            Parses the given file.
            </summary>
            <param name="sourceCode">The source code to parse.</param>
            <param name="passNumber">The current pass number.</param>
            <param name="document">The parsed representation of the file.</param>
            <returns>Returns false if no further analysis should be done on this file, or
            true if the file should be parsed again during the next pass.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsParser.PreParse">
            <summary>
            Called each time before a new analysis run is initiated.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsParser.PostParse">
            <summary>
            Called each time after a analysis run is complete.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsParser.SkipAnalysisForDocument(Microsoft.StyleCop.CodeDocument)">
            <summary>
            Indicates whether to skip analyzis on the given document.
            </summary>
            <param name="document">The document.</param>
            <returns>Returns true to skip analysis on the document.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsParser.IsRuleSuppressed(Microsoft.StyleCop.ICodeElement,Microsoft.StyleCop.Rule)">
            <summary>
            Determines whether the given rule is suppressed for the given element.
            </summary>
            <param name="element">The element to check.</param>
            <param name="rule">The rule to check.</param>
            <returns>Returns true is the rule is suppressed; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsParser.GetPreprocessorDirectiveType(Microsoft.StyleCop.CSharp.Symbol,System.Int32@)">
            <summary>
            Gets the type of the given preprocessor symbol.
            </summary>
            <param name="preprocessor">The preprocessor symbol.</param>
            <param name="bodyIndex">Returns the start index of the body of the preprocessor.</param>
            <returns>Returns the type or null if the type cannot be determined.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsParser.AddRuleSuppression(Microsoft.StyleCop.CSharp.CsElement,System.String,System.String,System.String)">
            <summary>
            Adds a rule suppression for the given element.
            </summary>
            <param name="element">The element.</param>
            <param name="ruleId">The ID of the rule to suppress.</param>
            <param name="ruleName">The name of the rule.</param>
            <param name="ruleNamespace">The namespace in which the rule is contained.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsParser.MatchElementWithPossibleElementsTraversingParents(Microsoft.StyleCop.CSharp.CsElement,System.Collections.Generic.IList{Microsoft.StyleCop.CSharp.CsElement})">
            <summary>
            Attempts to locate the given element within the collection of possible elements, and the parents and ancestors of those elements.
            </summary>
            <param name="element">The element to match.</param>
            <param name="possibleElements">The collection of possible elements to match against.</param>
            <returns>Returns true if a match is found; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsParser.FileNameMatchesFilter(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the given file name matches any of the filter patterns.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="filters">The filter patterns.</param>
            <returns>Returns true if the file name matches the patterns.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CsParser.IsRuleSuppressed(Microsoft.StyleCop.ICodeElement,System.Int32)">
            <summary>
            Determines whether the given element contains a suppression for the given rule.
            </summary>
            <param name="element">The element to check.</param>
            <param name="ruleHashCode">The rule hash code.</param>
            <returns>Returns true if the rule is suppressed; false otherwise.</returns>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CsParser.PartialElements">
            <summary>
            Gets the list of partial elements found within the document.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.VariableDeclarationStatement">
            <summary>
            A statement declaring a new variable.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.VariableDeclarationStatement.constant">
            <summary>
            Indicates whether the item is constant.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.VariableDeclarationStatement.expression">
            <summary>
            The inner expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableDeclarationStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,System.Boolean,Microsoft.StyleCop.CSharp.VariableDeclarationExpression)">
            <summary>
            Initializes a new instance of the VariableDeclarationStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="constant">Indicates whether the item is constant.</param>
            <param name="expression">The inner expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.VariableDeclarationStatement.Constant">
            <summary>
            Gets a value indicating whether the item is constant.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.VariableDeclarationStatement.InnerExpression">
            <summary>
            Gets the inner expression for this statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.VariableDeclarationStatement.Type">
            <summary>
            Gets the type of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.VariableDeclarationStatement.Declarators">
            <summary>
            Gets the list of declarators for the expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.TryStatement">
            <summary>
            A try-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.TryStatement.embeddedStatement">
            <summary>
            The statement embedded within the try-statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.TryStatement.finallyStatement">
            <summary>
            The finally-statement attached to this try-statement, if there is one.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.TryStatement.catchStatements">
            <summary>
            The list of catch-statements attached to this try-statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.TryStatement.#ctor(Microsoft.StyleCop.CSharp.BlockStatement)">
            <summary>
            Initializes a new instance of the TryStatement class.
            </summary>
            <param name="embeddedStatement">The statement embedded within this try-statement.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TryStatement.EmbeddedStatement">
            <summary>
            Gets the block embedded within this try-statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TryStatement.FinallyStatement">
            <summary>
            Gets the finally-statement attached to this try-statement, if there is one.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TryStatement.CatchStatements">
            <summary>
            Gets the list of catch-statements attached to this try-statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TryStatement.AttachedStatements">
            <summary>
            Gets the collection of statements attached to this try-statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Enum">
            <summary>
            Describes the contents of an enum element.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Enum.baseType">
            <summary>
            The derived base type.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Enum.items">
            <summary>
            The list of items in the enum.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Enum.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Enum class.
            </summary>
            <param name="document">The document that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Enum.Initialize">
            <summary>
            Gets the base type, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Enum.GetBaseType">
            <summary>
            Gets the base type of the item.
            </summary>
            <returns>Returns the name of the base type or null if none.</returns>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Enum.BaseType">
            <summary>
            Gets the base type for the enum.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Enum.Items">
            <summary>
            Gets the collection of items in the enum.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.UnaryExpression">
            <summary>
            An expression representing a unary operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UnaryExpression.operatorType">
            <summary>
            The type of operation being performed.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UnaryExpression.value">
            <summary>
            The expression the operator is being applied to.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.UnaryExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.UnaryExpression.Operator,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the UnaryExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="operatorType">The type of operation being performed.</param>
            <param name="value">The value the operator is being applied to.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.UnaryExpression.OperatorType">
            <summary>
            Gets the type of operation being performed.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.UnaryExpression.Value">
            <summary>
            Gets the value of the expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.UnaryExpression.Operator">
            <summary>
            The possible unary operator types.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UnaryExpression.Operator.Positive">
            <summary>
            The + operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UnaryExpression.Operator.Negative">
            <summary>
            The - operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UnaryExpression.Operator.Not">
            <summary>
            The ! operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UnaryExpression.Operator.BitwiseCompliment">
            <summary>
            The ~ operator.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.StatementType">
            <summary>
            The various <see cref="T:Microsoft.StyleCop.CSharp.Statement"/> types in a C# document.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Block">
            <summary>
            A block statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Break">
            <summary>
            A break statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Catch">
            <summary>
            A catch statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Checked">
            <summary>
            A checked statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.ConstructorInitializer">
            <summary>
            A constructor initialization statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Continue">
            <summary>
            A continue statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.DoWhile">
            <summary>
            A do-while statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Else">
            <summary>
            An else statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Empty">
            <summary>
            An empty statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Expression">
            <summary>
            An expression statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Finally">
            <summary>
            A finally statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Fixed">
            <summary>
            A fixed statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Foreach">
            <summary>
            A foreach statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.For">
            <summary>
            A for statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Goto">
            <summary>
            A goto statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.If">
            <summary>
            An if statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Label">
            <summary>
            A label statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Lock">
            <summary>
            A lock statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Return">
            <summary>
            A return statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.SwitchCase">
            <summary>
            A switch case statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.SwitchDefault">
            <summary>
            A switch default statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Switch">
            <summary>
            A switch statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Throw">
            <summary>
            A throw statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Try">
            <summary>
            A try statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Unchecked">
            <summary>
            An unchecked statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Unsafe">
            <summary>
            An unsafe statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Using">
            <summary>
            A using statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.VariableDeclaration">
            <summary>
            A variable declaration statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.While">
            <summary>
            A while statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StatementType.Yield">
            <summary>
            A yield statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.UsingDirective">
            <summary>
            Describes the contents of a using directive.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UsingDirective.namespaceType">
            <summary>
            The namespace type declared by the using element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UsingDirective.alias">
            <summary>
            The alias mapped to the namespace type, if any.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.UsingDirective.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Declaration,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the UsingDirective class.
            </summary>
            <param name="document">The document that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
            <param name="namespace">The namespace being used.</param>
            <param name="alias">Optional alias for the namespace, if any.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.UsingDirective.Initialize">
            <summary>
            Initializes the element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.UsingDirective.Alias">
            <summary>
            Gets the alias defined within the using directive, if any.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.UsingDirective.NamespaceType">
            <summary>
            Gets the namespace type declared by the using element.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ThrowStatement">
            <summary>
            A throw-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ThrowStatement.thrownExpression">
            <summary>
            The expression being thrown, if any.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ThrowStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the ThrowStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="thrownExpression">The expression being thrown, if any.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ThrowStatement.ThrownExpression">
            <summary>
            Gets the expression being thrown, if any.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.LabelStatement">
            <summary>
            A label within the code.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.LabelStatement.identifier">
            <summary>
            The label identifier.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.LabelStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.LiteralExpression)">
            <summary>
            Initializes a new instance of the LabelStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="identifier">The label identifier.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.LabelStatement.Identifier">
            <summary>
            Gets the label identifier.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.EmptyStatement">
            <summary>
            A statement consisting only of a single semicolon.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.EmptyStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList)">
            <summary>
            Initializes a new instance of the EmptyStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Symbol">
            <summary>
            One token, word, symbol, or line read from a C# code file.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Symbol.text">
            <summary>
            The item text.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Symbol.location">
            <summary>
            The location of this token in the code document.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Symbol.symbolType">
            <summary>
            The type of this symbol.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Symbol.#ctor(System.String,Microsoft.StyleCop.CSharp.SymbolType,Microsoft.StyleCop.CodeLocation)">
            <summary>
            Initializes a new instance of the Symbol class.
            </summary>
            <param name="text">The item text.</param>
            <param name="symbolType">The symbol type.</param>
            <param name="location">The location of the token within the code document.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Symbol.ToString">
            <summary>
            Returns the contents of the symbol as s string.
            </summary>
            <returns>Returns the symbol string.</returns>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Symbol.Text">
            <summary>
            Gets the symbol string.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Symbol.SymbolType">
            <summary>
            Gets or sets the type of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Symbol.Location">
            <summary>
            Gets the location of this symbol in the code document.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Symbol.LineNumber">
            <summary>
            Gets the line number that this symbol appears on in the document.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.FixedStatement">
            <summary>
            A fixed-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.FixedStatement.fixedVariable">
            <summary>
            The fixed variable.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.FixedStatement.embeddedStatement">
            <summary>
            The statement that is embedded within this fixed-statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.FixedStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.VariableDeclarationExpression)">
            <summary>
            Initializes a new instance of the FixedStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="fixedVariable">The fixed variable.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.FixedStatement.FixedVariable">
            <summary>
            Gets the fixed variable.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.FixedStatement.EmbeddedStatement">
            <summary>
            Gets the statement that is embedded within this fixed-statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.UncheckedExpression">
            <summary>
            An expression representing an unchecked operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UncheckedExpression.internalExpression">
            <summary>
            The expression wrapped within the unchecked expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.UncheckedExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the UncheckedExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="internalExpression">The expression wrapped within the unchecked expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.UncheckedExpression.InternalExpression">
            <summary>
            Gets the expression wrapped within this unchecked expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ConditionalExpression">
            <summary>
            An expression representing a conditional operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConditionalExpression.condition">
            <summary>
            The condition being evaluated.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConditionalExpression.trueValue">
            <summary>
            The expression that is evaluated if the condition is true.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConditionalExpression.falseValue">
            <summary>
            The expression that is evaluated if the condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ConditionalExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the ConditionalExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="condition">The condition being evaluated.</param>
            <param name="trueValue">The expression that is evaluated if the condition is true.</param>
            <param name="falseValue">The expression that is evaluated if the condition is false.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ConditionalExpression.Condition">
            <summary>
            Gets the condition that is being evaluated.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ConditionalExpression.TrueExpression">
            <summary>
            Gets the expression that is evaluated if the condition is true.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ConditionalExpression.FalseExpression">
            <summary>
            Gets the expression that is evaluated if the condition is false.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Constructor">
            <summary>
            Describes a class constructor..
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Constructor.initializer">
            <summary>
            The constructor's class initializer.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Constructor.parameters">
            <summary>
            The constructor's input parameters.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Constructor.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,System.Collections.Generic.IList{Microsoft.StyleCop.CSharp.Parameter},Microsoft.StyleCop.CSharp.MethodInvocationExpression,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Constructor class.
            </summary>
            <param name="document">The documenent that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="parameters">The parameters to the constructor.</param>
            <param name="initializerExpression">The constructor initializer, if there is one.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Constructor.Initialize">
            <summary>
            Initializes the contents of the constructor.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Constructor.Initializer">
            <summary>
            Gets the class initializer for the constructor, if any.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Constructor.Parameters">
            <summary>
            Gets the list of input parameters in the constructor's declaration.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.StackallocExpression">
            <summary>
            An expression representing a stackalloc operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.StackallocExpression.type">
            <summary>
            The type of the array.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.StackallocExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.ArrayAccessExpression)">
            <summary>
            Initializes a new instance of the StackallocExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="type">The array type.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.StackallocExpression.Type">
            <summary>
            Gets the array type.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.OperatorCategory">
            <summary>
            The various categories of operators.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorCategory.Relational">
            <summary>
            A relational symbol: '==', '!=', etc.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorCategory.Logical">
            <summary>
            A logical symbol: '||', '|', etc.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorCategory.Assignment">
            <summary>
            Assignment symbols: '=', '+=', etc. 
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorCategory.Arithmetic">
            <summary>
            Arithmetic symbol: '+', '-', '*', '/', etc.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorCategory.Shift">
            <summary>
            Shift operators.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorCategory.Conditional">
            <summary>
            A conditional colon or question mark.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorCategory.IncrementDecrement">
            <summary>
            An increment or decrement symbol.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorCategory.Unary">
            <summary>
            A unary operation: '!', '~', '+', '-'.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorCategory.Reference">
            <summary>
            A pointer, address-of, or dereference symbol.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.OperatorCategory.Lambda">
            <summary>
            A lambda operator.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.EnumItem">
            <summary>
            Describes a single item within an enum element.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.EnumItem.initialization">
            <summary>
            The initialization expression, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.EnumItem.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.Enum,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,Microsoft.StyleCop.CSharp.Expression,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EnumItem class.
            </summary>
            <param name="document">The document that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="initialization">The initialization expression, if there is one.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.EnumItem.Initialization">
            <summary>
            Gets the initialization expression for the enum item, if there is one.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.DefaultValueExpression">
            <summary>
            An expression representing a default value operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.DefaultValueExpression.type">
            <summary>
            The type to obtain the default value of.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.DefaultValueExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.LiteralExpression)">
            <summary>
            Initializes a new instance of the DefaultValueExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="type">The type to obtain the default value of.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.DefaultValueExpression.Type">
            <summary>
            Gets the type to obtain the default value of.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CastExpression">
            <summary>
            An expression representing a cast operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CastExpression.type">
            <summary>
            The cast type.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CastExpression.castedExpression">
            <summary>
            The expression being casted.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CastExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.LiteralExpression,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the CastExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="type">The cast type.</param>
            <param name="castedExpression">The expression being casted.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CastExpression.Type">
            <summary>
            Gets the cast type.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CastExpression.CastedExpression">
            <summary>
            Gets the expression being casted.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ArrayAccessExpression">
            <summary>
            An expression representing an array access operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ArrayAccessExpression.array">
            <summary>
            Represents the item being indexed.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ArrayAccessExpression.arguments">
            <summary>
            The array access arguments.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ArrayAccessExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Argument})">
            <summary>
            Initializes a new instance of the ArrayAccessExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="array">Represents the item being indexed.</param>
            <param name="arguments">The array access arguments.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ArrayAccessExpression.Array">
            <summary>
            Gets the item being indexed.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ArrayAccessExpression.Arguments">
            <summary>
            Gets the array access arguments.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Property">
            <summary>
            Describes a property element.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Property.returnType">
            <summary>
            The return type for the property.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Property.get">
            <summary>
            The get accessor for the property.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Property.set">
            <summary>
            The set accessor for the property.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Property.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,Microsoft.StyleCop.CSharp.TypeToken,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Property class.
            </summary>
            <param name="document">The documenent that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="returnType">The property return type.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Property.Initialize">
            <summary>
            Initializes the contents of the property.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Property.ReturnType">
            <summary>
            Gets the return type for the property.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Property.GetAccessor">
            <summary>
            Gets the get accessor for the property, if there is one.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Property.SetAccessor">
            <summary>
            Gets the set accessor for the property, if there is one.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Destructor">
            <summary>
            Describes a class destructor.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Destructor.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Destructor class.
            </summary>
            <param name="document">The documenent that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ObjectInitializerExpression">
            <summary>
            An expression representing an object initializer.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ObjectInitializerExpression.initializers">
            <summary>
            The collection of initializers within the expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ObjectInitializerExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.AssignmentExpression})">
            <summary>
            Initializes a new instance of the ObjectInitializerExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="initializers">The list of variable initializers within the 
            array initializer expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ObjectInitializerExpression.Initializers">
            <summary>
            Gets the list of initializers within the expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.LambdaExpression">
            <summary>
            A lambda expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.LambdaExpression.anonymousFunctionBody">
            <summary>
            The body of the lambda expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.LambdaExpression.#ctor">
            <summary>
            Initializes a new instance of the LambdaExpression class.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.LambdaExpression.AnonymousFunctionBody">
            <summary>
            Gets the body of the lambda expression, either an expression or a statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.TypeNames">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Accessor">
            <summary>
              Looks up a localized string similar to accessor.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.AccessorPlural">
            <summary>
              Looks up a localized string similar to accessors.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.AnonymousMethodExpression">
            <summary>
              Looks up a localized string similar to anonymous method expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.AnonymousMethodExpressionPlural">
            <summary>
              Looks up a localized string similar to anonymous method expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ArithmeticExpression">
            <summary>
              Looks up a localized string similar to arithmetic expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ArithmeticExpressionPlural">
            <summary>
              Looks up a localized string similar to arithmetic expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ArrayAccessExpression">
            <summary>
              Looks up a localized string similar to array access expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ArrayAccessExpressionPlural">
            <summary>
              Looks up a localized string similar to array access expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ArrayInitializerExpression">
            <summary>
              Looks up a localized string similar to array initializer expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ArrayInitializerExpressionPlural">
            <summary>
              Looks up a localized string similar to array initializer expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.AsExpression">
            <summary>
              Looks up a localized string similar to as expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.AsExpressionPlural">
            <summary>
              Looks up a localized string similar to as expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.AssignmentExpression">
            <summary>
              Looks up a localized string similar to assignment expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.AssignmentExpressionPlural">
            <summary>
              Looks up a localized string similar to assignment expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.AttributeExpression">
            <summary>
              Looks up a localized string similar to attribute expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.AttributeExpressionPlural">
            <summary>
              Looks up a localized string similar to attribute expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.BlockStatement">
            <summary>
              Looks up a localized string similar to block statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.BlockStatementPlural">
            <summary>
              Looks up a localized string similar to block statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.BreakStatement">
            <summary>
              Looks up a localized string similar to break statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.BreakStatementPlural">
            <summary>
              Looks up a localized string similar to break statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.CastExpression">
            <summary>
              Looks up a localized string similar to cast expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.CastExpressionPlural">
            <summary>
              Looks up a localized string similar to cast expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.CatchStatement">
            <summary>
              Looks up a localized string similar to catch statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.CatchStatementPlural">
            <summary>
              Looks up a localized string similar to catch statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.CheckedExpression">
            <summary>
              Looks up a localized string similar to checked expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.CheckedExpressionPlural">
            <summary>
              Looks up a localized string similar to checked expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.CheckedStatement">
            <summary>
              Looks up a localized string similar to checked statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.CheckedStatementPlural">
            <summary>
              Looks up a localized string similar to checked statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Class">
            <summary>
              Looks up a localized string similar to class.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ClassPlural">
            <summary>
              Looks up a localized string similar to classes.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.CollectionInitializerExpression">
            <summary>
              Looks up a localized string similar to collection initializer expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.CollectionInitializerExpressionPlural">
            <summary>
              Looks up a localized string similar to collection initializer expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ConditionalExpression">
            <summary>
              Looks up a localized string similar to conditional expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ConditionalExpressionPlural">
            <summary>
              Looks up a localized string similar to conditional expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ConditionalLogicalExpression">
            <summary>
              Looks up a localized string similar to conditional-logical expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ConditionalLogicalExpressionPlural">
            <summary>
              Looks up a localized string similar to conditional-logical expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Constructor">
            <summary>
              Looks up a localized string similar to constructor.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ConstructorInitializerStatement">
            <summary>
              Looks up a localized string similar to constructor initializer.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ConstructorInitializerStatementPlural">
            <summary>
              Looks up a localized string similar to constructor initializers.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ConstructorPlural">
            <summary>
              Looks up a localized string similar to constructors.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ContinueStatement">
            <summary>
              Looks up a localized string similar to continue statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ContinueStatementPlural">
            <summary>
              Looks up a localized string similar to continue statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.DecrementExpression">
            <summary>
              Looks up a localized string similar to decrement expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.DecrementExpressionPlural">
            <summary>
              Looks up a localized string similar to decrement expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.DefaultValueExpression">
            <summary>
              Looks up a localized string similar to default value expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.DefaultValueExpressionPlural">
            <summary>
              Looks up a localized string similar to default value expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Delegate">
            <summary>
              Looks up a localized string similar to delegate.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.DelegatePlural">
            <summary>
              Looks up a localized string similar to delegates.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Destructor">
            <summary>
              Looks up a localized string similar to destructor.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.DestructorPlural">
            <summary>
              Looks up a localized string similar to destructors.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.DoWhileStatement">
            <summary>
              Looks up a localized string similar to do-while statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.DoWhileStatementPlural">
            <summary>
              Looks up a localized string similar to do-while statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ElseStatement">
            <summary>
              Looks up a localized string similar to else statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ElseStatementPlural">
            <summary>
              Looks up a localized string similar to else statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.EmptyElement">
            <summary>
              Looks up a localized string similar to empty element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.EmptyElementPlural">
            <summary>
              Looks up a localized string similar to empty elements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.EmptyStatement">
            <summary>
              Looks up a localized string similar to empty statement (extra semicolon).
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.EmptyStatementPlural">
            <summary>
              Looks up a localized string similar to empty statements (extra semicolons).
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Enum">
            <summary>
              Looks up a localized string similar to enum.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.EnumItem">
            <summary>
              Looks up a localized string similar to enum item.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.EnumItemPlural">
            <summary>
              Looks up a localized string similar to enum items.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.EnumPlural">
            <summary>
              Looks up a localized string similar to enums.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Event">
            <summary>
              Looks up a localized string similar to event.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.EventPlural">
            <summary>
              Looks up a localized string similar to events.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ExpressionStatement">
            <summary>
              Looks up a localized string similar to expression statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ExpressionStatementPlural">
            <summary>
              Looks up a localized string similar to expression statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ExternAliasDirective">
            <summary>
              Looks up a localized string similar to extern alias directive.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ExternAliasDirectivePlural">
            <summary>
              Looks up a localized string similar to extern alias directives.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Field">
            <summary>
              Looks up a localized string similar to field.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.FieldPlural">
            <summary>
              Looks up a localized string similar to fields.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.FinallyStatement">
            <summary>
              Looks up a localized string similar to finally statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.FinallyStatementPlural">
            <summary>
              Looks up a localized string similar to finally statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.FixedStatement">
            <summary>
              Looks up a localized string similar to fixed statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.FixedStatementPlural">
            <summary>
              Looks up a localized string similar to fixed statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ForeachStatement">
            <summary>
              Looks up a localized string similar to foreach statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ForeachStatementPlural">
            <summary>
              Looks up a localized string similar to foreach statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ForStatement">
            <summary>
              Looks up a localized string similar to for statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ForStatementPlural">
            <summary>
              Looks up a localized string similar to for statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.GotoStatement">
            <summary>
              Looks up a localized string similar to goto statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.GotoStatementPlural">
            <summary>
              Looks up a localized string similar to goto statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.IfStatement">
            <summary>
              Looks up a localized string similar to if statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.IfStatementPlural">
            <summary>
              Looks up a localized string similar to if statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.IncrementExpression">
            <summary>
              Looks up a localized string similar to increment expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.IncrementExpressionPlural">
            <summary>
              Looks up a localized string similar to increment expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Indexer">
            <summary>
              Looks up a localized string similar to indexer.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.IndexerPlural">
            <summary>
              Looks up a localized string similar to indexers.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Interface">
            <summary>
              Looks up a localized string similar to interface.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.InterfacePlural">
            <summary>
              Looks up a localized string similar to interfaces.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.IsExpression">
            <summary>
              Looks up a localized string similar to is expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.IsExpressionPlural">
            <summary>
              Looks up a localized string similar to is expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.LabelStatement">
            <summary>
              Looks up a localized string similar to label statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.LabelStatementPlural">
            <summary>
              Looks up a localized string similar to label statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.LambdaExpression">
            <summary>
              Looks up a localized string similar to lambda expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.LambdaExpressionPlural">
            <summary>
              Looks up a localized string similar to lambda expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.LiteralExpression">
            <summary>
              Looks up a localized string similar to literal expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.LiteralExpressionPlural">
            <summary>
              Looks up a localized string similar to literal expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.LockStatement">
            <summary>
              Looks up a localized string similar to lock statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.LockStatementPlural">
            <summary>
              Looks up a localized string similar to lock statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.LogicalExpression">
            <summary>
              Looks up a localized string similar to logical expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.LogicalExpressionPlural">
            <summary>
              Looks up a localized string similar to logical expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.MemberAccessExpression">
            <summary>
              Looks up a localized string similar to member access expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.MemberAccessExpressionPlural">
            <summary>
              Looks up a localized string similar to member access expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Method">
            <summary>
              Looks up a localized string similar to method.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.MethodInvocationExpression">
            <summary>
              Looks up a localized string similar to method invocation expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.MethodInvocationExpressionPlural">
            <summary>
              Looks up a localized string similar to method invocation expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.MethodPlural">
            <summary>
              Looks up a localized string similar to methods.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Namespace">
            <summary>
              Looks up a localized string similar to namespace.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.NamespacePlural">
            <summary>
              Looks up a localized string similar to namespaces.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.NewArrayExpression">
            <summary>
              Looks up a localized string similar to new array expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.NewArrayExpressionPlural">
            <summary>
              Looks up a localized string similar to new array expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.NewExpression">
            <summary>
              Looks up a localized string similar to new expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.NewExpressionPlural">
            <summary>
              Looks up a localized string similar to new expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.NullCoalescingExpression">
            <summary>
              Looks up a localized string similar to null-coalescing expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.NullCoalescingExpressionPlural">
            <summary>
              Looks up a localized string similar to null-coalescing expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ObjectInitializerExpression">
            <summary>
              Looks up a localized string similar to object initializer expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ObjectInitializerExpressionPlural">
            <summary>
              Looks up a localized string similar to object initializer expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ParenthesizedExpression">
            <summary>
              Looks up a localized string similar to parenthesized expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ParenthesizedExpressionPlural">
            <summary>
              Looks up a localized string similar to parenthesized expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Property">
            <summary>
              Looks up a localized string similar to property.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.PropertyPlural">
            <summary>
              Looks up a localized string similar to properties.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryContinuationClause">
            <summary>
              Looks up a localized string similar to into clause.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryContinuationClausePlural">
            <summary>
              Looks up a localized string similar to into clauses.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryExpression">
            <summary>
              Looks up a localized string similar to query expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryExpressionPlural">
            <summary>
              Looks up a localized string similar to query expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryFromClause">
            <summary>
              Looks up a localized string similar to from clause.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryFromClausePlural">
            <summary>
              Looks up a localized string similar to from clauses.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryGroupClause">
            <summary>
              Looks up a localized string similar to group clause.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryGroupClausePlural">
            <summary>
              Looks up a localized string similar to group clauses.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryJoinClause">
            <summary>
              Looks up a localized string similar to join clause.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryJoinClausePlural">
            <summary>
              Looks up a localized string similar to join clauses.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryLetClause">
            <summary>
              Looks up a localized string similar to let clause.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryLetClausePlural">
            <summary>
              Looks up a localized string similar to let clauses.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryOrderByClause">
            <summary>
              Looks up a localized string similar to order-by clause.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryOrderByClausePlural">
            <summary>
              Looks up a localized string similar to order-by clauses.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QuerySelectClause">
            <summary>
              Looks up a localized string similar to select clause.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QuerySelectClausePlural">
            <summary>
              Looks up a localized string similar to select clauses.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryWhereClause">
            <summary>
              Looks up a localized string similar to where clause.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.QueryWhereClausePlural">
            <summary>
              Looks up a localized string similar to where clauses.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.RelationalExpression">
            <summary>
              Looks up a localized string similar to relational expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.RelationalExpressionPlural">
            <summary>
              Looks up a localized string similar to relational expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ReturnStatement">
            <summary>
              Looks up a localized string similar to return statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ReturnStatementPlural">
            <summary>
              Looks up a localized string similar to return statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.SizeofExpression">
            <summary>
              Looks up a localized string similar to sizeof expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.SizeofExpressionPlural">
            <summary>
              Looks up a localized string similar to sizeof expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.StackallocExpression">
            <summary>
              Looks up a localized string similar to stackalloc expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.StackallocExpressionPlural">
            <summary>
              Looks up a localized string similar to stackalloc expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.Struct">
            <summary>
              Looks up a localized string similar to struct.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.StructPlural">
            <summary>
              Looks up a localized string similar to structs.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.SwitchCaseStatement">
            <summary>
              Looks up a localized string similar to switch-case statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.SwitchCaseStatementPlural">
            <summary>
              Looks up a localized string similar to switch-case statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.SwitchDefaultStatement">
            <summary>
              Looks up a localized string similar to switch-default statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.SwitchDefaultStatementPlural">
            <summary>
              Looks up a localized string similar to switch-default statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.SwitchStatement">
            <summary>
              Looks up a localized string similar to switch statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.SwitchStatementPlural">
            <summary>
              Looks up a localized string similar to switch statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ThrowStatement">
            <summary>
              Looks up a localized string similar to throw statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.ThrowStatementPlural">
            <summary>
              Looks up a localized string similar to throw statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.TryStatement">
            <summary>
              Looks up a localized string similar to try statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.TryStatementPlural">
            <summary>
              Looks up a localized string similar to try statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.TypeofExpression">
            <summary>
              Looks up a localized string similar to typeof expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.TypeofExpressionPlural">
            <summary>
              Looks up a localized string similar to typeof expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.UnaryExpression">
            <summary>
              Looks up a localized string similar to unary expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.UnaryExpressionPlural">
            <summary>
              Looks up a localized string similar to unary expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.UncheckedExpression">
            <summary>
              Looks up a localized string similar to unchecked expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.UncheckedExpressionPlural">
            <summary>
              Looks up a localized string similar to unchecked expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.UncheckedStatement">
            <summary>
              Looks up a localized string similar to unchecked statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.UncheckedStatementPlural">
            <summary>
              Looks up a localized string similar to unchecked statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.UnsafeAccessExpression">
            <summary>
              Looks up a localized string similar to unsafe access expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.UnsafeAccessExpressionPlural">
            <summary>
              Looks up a localized string similar to unsafe access expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.UnsafeStatement">
            <summary>
              Looks up a localized string similar to unsafe statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.UnsafeStatementPlural">
            <summary>
              Looks up a localized string similar to unsafe statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.UsingDirective">
            <summary>
              Looks up a localized string similar to using directive.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.UsingDirectivePlural">
            <summary>
              Looks up a localized string similar to using directives.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.UsingStatement">
            <summary>
              Looks up a localized string similar to using statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.UsingStatementPlural">
            <summary>
              Looks up a localized string similar to using statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.VariableDeclarationExpression">
            <summary>
              Looks up a localized string similar to variable declaration expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.VariableDeclarationExpressionPlural">
            <summary>
              Looks up a localized string similar to variable declaration expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.VariableDeclarationStatement">
            <summary>
              Looks up a localized string similar to variable declaration statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.VariableDeclarationStatementPlural">
            <summary>
              Looks up a localized string similar to variable declaration statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.VariableDeclaratorExpression">
            <summary>
              Looks up a localized string similar to variable declarator expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.VariableDeclaratorExpressionPlural">
            <summary>
              Looks up a localized string similar to variable declarator expressions.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.WhileStatement">
            <summary>
              Looks up a localized string similar to while statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.WhileStatementPlural">
            <summary>
              Looks up a localized string similar to while statements.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.YieldStatement">
            <summary>
              Looks up a localized string similar to yield statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.TypeNames.YieldStatementPlural">
            <summary>
              Looks up a localized string similar to yield statements.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CodeLexer">
            <summary>
            Breaks the components of a C# code file down into individual symbols.
            </summary>
            <content>
            Contains the MarkerData sub-class.
            </content>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeLexer.codeReader">
            <summary>
            Used for reading the source code.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeLexer.marker">
            <summary>
            The current marker in the code string.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeLexer.source">
            <summary>
            The source to read.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeLexer.conditionalDirectives">
            <summary>
            Keeps track of conditional directives found in the code.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeLexer.defines">
            <summary>
            The list of defines in the file.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeLexer.undefines">
            <summary>
            The list of undefines in the file.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeLexer.parser">
            <summary>
            The C# parser.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.#ctor(Microsoft.StyleCop.CSharp.CsParser,Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CodeReader)">
            <summary>
            Initializes a new instance of the CodeLexer class.
            </summary>
            <param name="parser">The C# parser.</param>
            <param name="source">The source to read.</param>
            <param name="codeReader">Used for reading the source code.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetSymbols(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.Configuration)">
            <summary>
            Gets the list of symbols from the code file.
            </summary>
            <param name="sourceCode">The source code containing the symbols.</param>
            <param name="configuration">The active configuration.</param>
            <returns>Returns the list of symbols in the code file.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetSymbol(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.Configuration,System.Boolean)">
            <summary>
            Gets the next symbol in the code, starting at the current marker.
            </summary>
            <param name="sourceCode">The source code containing the symbol.</param>
            <param name="configuration">The active configuration.</param>
            <param name="evaluatePreprocessors">Indicates whether to evaluate preprocessor symbols.</param>
            <returns>Returns the next symbol in the document.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetOtherSymbolType(System.String)">
            <summary>
            Gets the type of the given symbol.
            </summary>
            <param name="text">The symbol to look up.</param>
            <returns>Returns the type of the symbol.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.CodeLocationFromMarker(Microsoft.StyleCop.CSharp.CodeLexer.MarkerData)">
            <summary>
            Creates a CodeLocation from the given marker.
            </summary>
            <param name="marker">The marker.</param>
            <returns>Returns the CodeLocation.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.IsLetterExtended(System.Char)">
            <summary>
            Indicates whether the character is considered a letter for the purposes of keywords and type names.
            </summary>
            <param name="character">The character.</param>
            <returns>Returns true if the character looks like a letter.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.CreateAndMovePastSymbol(System.String,Microsoft.StyleCop.CSharp.SymbolType)">
            <summary>
            Reads, creates, and moves past a symbol.
            </summary>
            <param name="text">The symbol text.</param>
            <param name="type">The type of the symbol.</param>
            <returns>Returns the symbol.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetNumber">
            <summary>
            Gets the next number.
            </summary>
            <returns>Returns the number.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetPositiveNumber(System.Int32)">
            <summary>
            Extracts the body of a positive number from the code.
            </summary>
            <param name="index">The first index of the number.</param>
            <returns>Returns the last index of the number.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetDecimalLiteral(System.Int32)">
            <summary>
            Extracts a decimal integer literal from the code.
            </summary>
            <param name="index">The first index of the decimal integer literal.</param>
            <returns>Returns the last index of the decimal integer literal.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetRealLiteralTrailingCharacters(System.Int32,System.Boolean)">
            <summary>
            Gets the characters trailing behind a real literal number, if there are any.
            </summary>
            <param name="index">The start index of the trailing characters.</param>
            <param name="requiresDecimalPoint">Indicates whether the number is required to start with a decimal point.</param>
            <returns>Returns the last index of the trailing characters.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetDecimalFraction(System.Int32)">
            <summary>
            Gets the decimal digits that appear after a decimal point in a real literal.
            </summary>
            <param name="index">The start index of the remainder numbers.</param>
            <returns>Returns the last index of the remainder nubmers.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetRealLiteralExponent(System.Int32)">
            <summary>
            Gets an exponent at the end of a real literal number.
            </summary>
            <param name="index">The start index of the exponent.</param>
            <returns>Returns the last index of the exponent.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetHexidecimalIntegerLiteral(System.Int32)">
            <summary>
            Extracts a hexidecimal integer literal from the code.
            </summary>
            <param name="index">The first index of the hexidecimal integer literal.</param>
            <returns>Returns the last index of the hexidecimal integer literal.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetIntegerTypeSuffix(System.Int32)">
            <summary>
            Gets the type suffix tacked onto the end of an integer literal.
            </summary>
            <param name="index">The start index of the literal.</param>
            <returns>Returns the index of the integer type suffix, if there is one.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetOtherSymbol(Microsoft.StyleCop.SourceCode)">
            <summary>
            Gets an unknown symbol type.
            </summary>
            <param name="sourceCode">The source code containing the symbols.</param>
            <returns>Returns the item.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.ReadToEndOfOtherSymbol(System.Text.StringBuilder)">
            <summary>
            Gathers all the characters up to the last index of an unknown word.
            </summary>
            <param name="text">The texst buffer to add the symbol text to.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetNewLine">
            <summary>
            Gets the next newline character from the document.
            </summary>
            <returns>Returns the newline.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetWhitespace">
            <summary>
            Gets the next whitespace stream.
            </summary>
            <returns>Returns the whitespace.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetString">
            <summary>
            Gets the next string from the code.
            </summary>
            <returns>Returns the string.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetLiteral">
            <summary>
            Gets the next literal from the code.
            </summary>
            <returns>Returns the literal.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetLiteralString(System.Text.StringBuilder)">
            <summary>
            Gets the next literal string from the code.
            </summary>
            <param name="text">The text buffer to add the string text to.</param>
            <returns>Returns the literal string.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetLiteralKeyword(System.Text.StringBuilder)">
            <summary>
            Gets the next literal keyword token from the code.
            </summary>
            <param name="text">The text buffer to add the string text to.</param>
            <returns>Returns the literal keyword token.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetComment">
            <summary>
            Gets the next comment.
            </summary>
            <returns>Returns the comment.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetMultiLineComment(System.Text.StringBuilder)">
            <summary>
            Gets the next multi-line comment.
            </summary>
            <param name="text">The buffer to add the text to.</param>
            <returns>Returns the comment.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetSingleLineComment(System.Text.StringBuilder)">
            <summary>
            Gets the next single line comment from the code.
            </summary>
            <param name="text">The buffer in which to store the text.</param>
            <returns>Returns the single line comment.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetXmlHeaderLine(System.Text.StringBuilder)">
            <summary>
            Gets the next Xml header line from the code.
            </summary>
            <param name="text">The buffer in which to store the text.</param>
            <returns>Returns the Xml header line.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetPreprocessorDirectiveSymbol(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.Configuration,System.Boolean)">
            <summary>
            Gets the next preprocessor directive keyword.
            </summary>
            <param name="sourceCode">The source code.</param>
            <param name="configuration">The active configuration.</param>
            <param name="evaluate">Indicates whether to evaluate the preprocessor symbol if it is a conditional
            directive.</param>
            <returns>Returns the next preprocessor directive keyword.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.CheckForConditionalCompilationDirective(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CSharp.Symbol,Microsoft.StyleCop.Configuration)">
            <summary>
            Checks the given preprocessor symbol to determine whether it is a conditional preprocessor directive.
            If so, determines whether we should skip past code which is out of scope.
            </summary>
            <param name="sourceCode">The source code file containing this directive.</param>
            <param name="preprocessorSymbol">The symbol to check.</param>
            <param name="configuration">The active configuration.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetIfElsePreprocessorDirectives(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CSharp.Symbol,Microsoft.StyleCop.Configuration,System.Int32,System.String,System.Boolean@)">
            <summary>
            Extracts an if, endif, or else directive.
            </summary>
            <param name="sourceCode">The source code being parsed.</param>
            <param name="preprocessorSymbol">The preprocessor symbol being parsed.</param>
            <param name="configuration">The current code configuration.</param>
            <param name="startIndex">The start index of the item within the symbols.</param>
            <param name="type">The type of the preprocessor symbol.</param>
            <param name="skip">Returns a value indicating whether the item should be skipped.</param>
            <returns>Returns a value indicating whether to ignore the item.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetDefinePreprocessorDirective(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CSharp.Symbol,System.Int32)">
            <summary>
            Gets a define preprocessor directive from the code.
            </summary>
            <param name="sourceCode">The source code being parsed.</param>
            <param name="preprocessorSymbol">The preprocessor symbol being parsed.</param>
            <param name="startIndex">The start index within the symbols.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetUndefinePreprocessorDirective(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CSharp.Symbol,System.Int32)">
            <summary>
            Gets an undefine preprocessor directive from the code.
            </summary>
            <param name="sourceCode">The source code being parsed.</param>
            <param name="preprocessorSymbol">The preprocessor symbol being parsed.</param>
            <param name="startIndex">The start index within the symbols.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.EvaluateConditionalDirectiveExpression(Microsoft.StyleCop.SourceCode,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.Configuration)">
            <summary>
            Evaluates an expression from within a conditional compiliation directive to determine
            whether it resolves to true or false.
            </summary>
            <param name="sourceCode">The source code containing the expression.</param>
            <param name="expression">The expression to evalulate.</param>
            <param name="configuration">The active configuration.</param>
            <returns>Returns true if the expression evaluates to true, otherwise returns false.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.GetOperatorSymbol(System.Char)">
            <summary>
            Gets the next operator symbol.
            </summary>
            <param name="character">The first character of the symbol.</param>
            <returns>Returns the next operator symbol.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.AdvanceToEndOfLine(System.Text.StringBuilder)">
            <summary>
            Advances to the next end of line character and adds all characters to the given text buffer.
            </summary>
            <param name="text">The text buffer in which to store the rest of the line.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.FindNextEndOfLine">
            <summary>
            Finds the offset index of the next end-of-line character.
            </summary>
            <returns>Returns the offset index of the next end-of-line character. If there are no more end-of-line
            characters, returns the index of the character past the end of the file.</returns>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeLexer.SourceCode">
            <summary>
            Gets the source code.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CodeLexer.MarkerData">
            <summary>
            The current marker in the code.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeLexer.MarkerData.index">
            <summary>
            The index of the marker in the code.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeLexer.MarkerData.indexOnLine">
            <summary>
            The index of the marker in the line on which it appears.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodeLexer.MarkerData.lineNumber">
            <summary>
            The line number of the marker index in the code.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CodeLexer.MarkerData.#ctor">
            <summary>
            Initializes a new instance of the MarkerData class.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeLexer.MarkerData.Index">
            <summary>
            Gets or sets the index of the marker in the code string.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeLexer.MarkerData.IndexOnLine">
            <summary>
            Gets or sets the index of the marker in the line on which it appears.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CodeLexer.MarkerData.LineNumber">
            <summary>
            Gets or sets the line number of the marker index.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Number">
            <summary>
            Describes a numeric token.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Number.#ctor(System.String,Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},System.Boolean)">
            <summary>
            Initializes a new instance of the Number class.
            </summary>
            <param name="token">The token string.</param>
            <param name="location">The location of the number in the code.</param>
            <param name="parent">The parent code part.</param>
            <param name="generated">True if the token is inside of a block of generated code.</param>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.IfStatement">
            <summary>
            An if-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.IfStatement.conditionExpression">
            <summary>
            The expression within the if-statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.IfStatement.embeddedStatement">
            <summary>
            The statement that is embedded within this if-statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.IfStatement.elseStatement">
            <summary>
            The else-statement attached to the end of this if-statement, if any.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.IfStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the IfStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="conditionExpression">The expression within the if-statement.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.IfStatement.ConditionExpression">
            <summary>
            Gets the expression within the if-statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.IfStatement.EmbeddedStatement">
            <summary>
            Gets the statement that is embedded within this if-statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.IfStatement.AttachedElseStatement">
            <summary>
            Gets the else-statement attached to the end of this if-statement, if any.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.IfStatement.AttachedStatements">
            <summary>
            Gets the collection of statements attached to this if-statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ElseStatement">
            <summary>
            An else-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElseStatement.embeddedStatement">
            <summary>
            The statement that is embedded within this else-statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElseStatement.conditionExpression">
            <summary>
            The expression within the if portion of this else-statement, if any.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ElseStatement.elseStatement">
            <summary>
            The else-statement attached to the end of this else-statement, if any.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ElseStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the ElseStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="conditionExpression">The expression within the if portion of this 
            else-statement, if any.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ElseStatement.ConditionExpression">
            <summary>
            Gets the expression within the if portion of this else-statement, if any.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ElseStatement.EmbeddedStatement">
            <summary>
            Gets the statement that is embedded within this else-statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ElseStatement.AttachedElseStatement">
            <summary>
            Gets the next else-statement attached to the end of this else-statement, if any.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ElseStatement.AttachedStatements">
            <summary>
            Gets the collection of statements attached to this else-statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CheckedStatement">
            <summary>
            A checked-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CheckedStatement.embeddedStatement">
            <summary>
            The statement embedded within this checked statement, if any.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.CheckedStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.BlockStatement)">
            <summary>
            Initializes a new instance of the CheckedStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="embeddedStatement">The block statement embedded within this checked statement, if any.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.CheckedStatement.EmbeddedStatement">
            <summary>
            Gets the block statement embedded within this checked statement, if any.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Delegate">
            <summary>
            Describes a delegate element.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Delegate.returnType">
            <summary>
            The delegate's return type.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Delegate.parameters">
            <summary>
            The delegate's input parameters.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Delegate.typeConstraints">
            <summary>
            The list if type constraints on the item, if any.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Delegate.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,Microsoft.StyleCop.CSharp.TypeToken,System.Collections.Generic.IList{Microsoft.StyleCop.CSharp.Parameter},System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.TypeParameterConstraintClause},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Delegate class.
            </summary>
            <param name="document">The document that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="returnType">The return type.</param>
            <param name="parameters">The parameters to the delegate.</param>
            <param name="typeConstraints">The list of type constraints on the element.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether this is generated code.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Delegate.ReturnType">
            <summary>
            Gets the delegate's return type.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Delegate.Parameters">
            <summary>
            Gets the list of input parameters in the delegate's declaration.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Delegate.TypeConstraints">
            <summary>
            Gets the list of type constraints on the delegate, if any.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ParameterModifiers">
            <summary>
            The various types of modifiers on a <see cref="T:Microsoft.StyleCop.CSharp.Parameter"/>.
            </summary>
            <subcategory>other</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ParameterModifiers.None">
            <summary>
            No modifiers specified.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ParameterModifiers.Out">
            <summary>
            The 'out' modifier.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ParameterModifiers.Ref">
            <summary>
            The 'ref' modifier.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ParameterModifiers.Params">
            <summary>
            The 'params' modifier.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ParameterModifiers.This">
            <summary>
            The 'this' modifier.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ParameterModifiers.In">
            <summary>
            The 'in' modifier.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.VariableDeclaratorExpression">
            <summary>
            A single variable declarator within a variable declaration expression.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.VariableDeclaratorExpression.identifier">
            <summary>
            The identifier of the variable.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.VariableDeclaratorExpression.initializer">
            <summary>
            The initialization expression for the variable.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.VariableDeclaratorExpression.parent">
            <summary>
            The parent expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableDeclaratorExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.LiteralExpression,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the VariableDeclaratorExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="identifier">The identifier name of the variable.</param>
            <param name="initializer">The initialization expression for the variable.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.VariableDeclaratorExpression.Identifier">
            <summary>
            Gets the identifier name of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.VariableDeclaratorExpression.Initializer">
            <summary>
            Gets the initialization statement for the variable.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.VariableDeclaratorExpression.ParentVariable">
            <summary>
            Gets the parent expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.IsExpression">
            <summary>
            An expression representing an is-operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.IsExpression.value">
            <summary>
            The value to check.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.IsExpression.type">
            <summary>
            The type to check.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.IsExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.LiteralExpression)">
            <summary>
            Initializes a new instance of the IsExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="value">The value to check.</param>
            <param name="type">The type to check.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.IsExpression.Value">
            <summary>
            Gets the value to check.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.IsExpression.Type">
            <summary>
            Gets the type to check.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Method">
            <summary>
            Describes a method element.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Method.returnType">
            <summary>
            The method's return type.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Method.parameters">
            <summary>
            The method's input parameters.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Method.typeConstraints">
            <summary>
            The list if type constraints on the item, if any.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Method.extensionMethod">
            <summary>
            Indicates whether this is an extension method. 
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Method.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,Microsoft.StyleCop.CSharp.TypeToken,System.Collections.Generic.IList{Microsoft.StyleCop.CSharp.Parameter},System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.TypeParameterConstraintClause},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Method class.
            </summary>
            <param name="document">The document that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="returnType">The method's return type.</param>
            <param name="parameters">The parameters to the method.</param>
            <param name="typeConstraints">The list of type constraints on the element.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Method.Initialize">
            <summary>
            Initializes the method.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Method.ReturnType">
            <summary>
            Gets the method's return type.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Method.Parameters">
            <summary>
            Gets the list of input parameters in the method's declaration.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Method.TypeConstraints">
            <summary>
            Gets the list of type constraints on the method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Method.IsExtensionMethod">
            <summary>
            Gets a value indicating whether this is an extension method. 
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ExpressionType">
            <summary>
            The various <see cref="T:Microsoft.StyleCop.CSharp.Expression"/> types in a C# document.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.AnonymousMethod">
            <summary>
            An anonymous method expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Arithmetic">
            <summary>
            An arithmetic expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.ArrayAccess">
            <summary>
            An array access expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.ArrayInitializer">
            <summary>
            An array initializer expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.As">
            <summary>
            An as-expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Assignment">
            <summary>
            An assignment expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Attribute">
            <summary>
            An attribute call expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Cast">
            <summary>
            A cast expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Checked">
            <summary>
            A checked expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.CollectionInitializer">
            <summary>
            A collection initializer expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Conditional">
            <summary>
            A conditional expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.ConditionalLogical">
            <summary>
            A conditional logical expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Decrement">
            <summary>
            A decrement expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.DefaultValue">
            <summary>
            A default value expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.ExpressionList">
            <summary>
            A comma-separated list of expressions.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Increment">
            <summary>
            An increment expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Is">
            <summary>
            An is-expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Lambda">
            <summary>
            A lambda expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Literal">
            <summary>
            A literal expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Logical">
            <summary>
            A logical expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.MemberAccess">
            <summary>
            A member access expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.MethodInvocation">
            <summary>
            A method invocation expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.NewArray">
            <summary>
            A new array allocation expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.New">
            <summary>
            A new allocation expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.NullCoalescing">
            <summary>
            A null-coalescing expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.ObjectInitializer">
            <summary>
            An object initializer expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Parenthesized">
            <summary>
            A parenthesized expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Query">
            <summary>
            A query expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Relational">
            <summary>
            A relational expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Sizeof">
            <summary>
            A sizeof expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Stackalloc">
            <summary>
            A stackalloc expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Typeof">
            <summary>
            A typeof expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Unary">
            <summary>
            A unary exprssion.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.Unchecked">
            <summary>
            An unchecked expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.UnsafeAccess">
            <summary>
            An unsafe access expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.VariableDeclaration">
            <summary>
            A variable declaration expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.VariableDeclarator">
            <summary>
            A variable declarator expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExpressionType.EventDeclarator">
            <summary>
            An event declarator expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.UnsafeAccessExpression">
            <summary>
            An expression representing a dereference or address-of operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UnsafeAccessExpression.operatorType">
            <summary>
            The type of operation being performed.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UnsafeAccessExpression.value">
            <summary>
            The expression the operator is being applied to.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.UnsafeAccessExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.UnsafeAccessExpression.Operator,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the UnsafeAccessExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="operatorType">The type of operation being performed.</param>
            <param name="value">The value the operator is being applied to.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.UnsafeAccessExpression.OperatorType">
            <summary>
            Gets the type of operation being performed.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.UnsafeAccessExpression.Value">
            <summary>
            Gets the value of the expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.UnsafeAccessExpression.Operator">
            <summary>
            The various unsafe access operator types.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UnsafeAccessExpression.Operator.Dereference">
            <summary>
            The * operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UnsafeAccessExpression.Operator.AddressOf">
            <summary>
            The ampersand address-of operator.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.CodePartType">
            <summary>
            The various types of code units.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodePartType.Token">
            <summary>
            A simple token.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodePartType.Element">
            <summary>
            An element.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodePartType.Statement">
            <summary>
            A statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodePartType.Expression">
            <summary>
            An expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodePartType.QueryClause">
            <summary>
            A query clause.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodePartType.ConstraintClause">
            <summary>
            A type constraint clause.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodePartType.Argument">
            <summary>
            A method call argument.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodePartType.Parameter">
            <summary>
            A method parameter.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodePartType.Variable">
            <summary>
            A variable declaration.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodePartType.FileHeader">
            <summary>
            A file header.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.CodePartType.Document">
            <summary>
            A code document.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ICodePartExtensions">
            <summary>
            Extension methods for the ICodePart class.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ICodePartExtensions.FindParentElement(Microsoft.StyleCop.CSharp.ICodePart)">
            <summary>
            Gets the element that contains this code unit, if there is one.
            </summary>
            <param name="part">The code part.</param>
            <returns>Returns the element or null if there is no parent expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ICodePartExtensions.FindParentStatement(Microsoft.StyleCop.CSharp.ICodePart)">
            <summary>
            Gets the statement that contains this code unit, if there is one.
            </summary>
            <param name="part">The code part.</param>
            <returns>Returns the statement or null if there is no parent expression.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ICodePartExtensions.FindParentExpression(Microsoft.StyleCop.CSharp.ICodePart)">
            <summary>
            Gets the expression that contains this code part, if there is one.
            </summary>
            <param name="part">The code part.</param>
            <returns>Returns the expression or null if there is no parent expression.</returns>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.BreakStatement">
            <summary>
            A break-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.BreakStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList)">
            <summary>
            Initializes a new instance of the BreakStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.RelationalExpression">
            <summary>
            An expression representing a relational operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.RelationalExpression.operatorType">
            <summary>
            The type of operation being performed.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.RelationalExpression.leftHandSide">
            <summary>
            The left hand size of the expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.RelationalExpression.rightHandSide">
            <summary>
            The right hand size of the expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.RelationalExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.RelationalExpression.Operator,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the RelationalExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="operatorType">The type of operation being performed.</param>
            <param name="leftHandSide">The left hand side of the expression.</param>
            <param name="rightHandSide">The right hand side of the expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.RelationalExpression.OperatorType">
            <summary>
            Gets the type of operation being performed.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.RelationalExpression.LeftHandSide">
            <summary>
            Gets the left hand side of the expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.RelationalExpression.RightHandSide">
            <summary>
            Gets the right hand side of the expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.RelationalExpression.Operator">
            <summary>
            The various relational operator types.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.RelationalExpression.Operator.EqualTo">
            <summary>
            The == operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.RelationalExpression.Operator.NotEqualTo">
            <summary>
            The != operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.RelationalExpression.Operator.GreaterThan">
            <summary>
            The greater-than operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.RelationalExpression.Operator.LessThan">
            <summary>
            The less-than operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.RelationalExpression.Operator.GreaterThanOrEqualTo">
            <summary>
            The greater-than-or-equal-to operator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.RelationalExpression.Operator.LessThanOrEqualTo">
            <summary>
            The less-than-or-equal-to operator.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.AsExpression">
            <summary>
            An expression representing an as-operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AsExpression.value">
            <summary>
            The value to convert.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.AsExpression.type">
            <summary>
            The type of the conversion.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.AsExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.LiteralExpression)">
            <summary>
            Initializes a new instance of the AsExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="value">The value to convert.</param>
            <param name="type">The type of the conversion.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.AsExpression.Value">
            <summary>
            Gets the value to convert.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.AsExpression.Type">
            <summary>
            Gets the type of the conversion.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ConstructorInitializerStatement">
            <summary>
            A constructor initialization statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConstructorInitializerStatement.expression">
            <summary>
            The expression within this statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ConstructorInitializerStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.MethodInvocationExpression)">
            <summary>
            Initializes a new instance of the ConstructorInitializerStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="expression">The expression within this statement.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ConstructorInitializerStatement.Expression">
            <summary>
            Gets the expression within this statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.QueryOrderByDirection">
            <summary>
            The various direction types for an order-by query.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryOrderByDirection.Undefined">
            <summary>
            Undefined order.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryOrderByDirection.Ascending">
            <summary>
            Ascending order.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryOrderByDirection.Descending">
            <summary>
            Descending order.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.QueryOrderByOrdering">
            <summary>
            An individual ordering statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryOrderByOrdering.direction">
            <summary>
            The ordering direction.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryOrderByOrdering.expression">
            <summary>
            The ordering expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryOrderByOrdering.op_Equality(Microsoft.StyleCop.CSharp.QueryOrderByOrdering,Microsoft.StyleCop.CSharp.QueryOrderByOrdering)">
            <summary>
            Determines whether the two items are equal.
            </summary>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <returns>Returns true if the items are equal</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryOrderByOrdering.op_Inequality(Microsoft.StyleCop.CSharp.QueryOrderByOrdering,Microsoft.StyleCop.CSharp.QueryOrderByOrdering)">
            <summary>
            Determines whether the two items are inequal.
            </summary>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <returns>Returns true if the items are not equal.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryOrderByOrdering.Equals(System.Object)">
            <summary>
            Determines whether this value is equal to the given object.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>Returns true if the objects are equal.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryOrderByOrdering.GetHashCode">
            <summary>
            Gets a unique hash code for the item.
            </summary>
            <returns>Returns the hash code.</returns>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryOrderByOrdering.Direction">
            <summary>
            Gets or sets the ordering direction.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryOrderByOrdering.Expression">
            <summary>
            Gets or sets the ordering expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.QueryOrderByClause">
            <summary>
            Describes a order-by clause in a query expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.QueryOrderByClause.orderings">
            <summary>
            The list of orderings.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.QueryOrderByClause.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.QueryOrderByOrdering})">
            <summary>
            Initializes a new instance of the QueryOrderByClause class.
            </summary>
            <param name="tokens">The list of tokens that form the clause.</param>
            <param name="orderings">The collection of orderings in the clause.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.QueryOrderByClause.Orderings">
            <summary>
            Gets the collection of orderings in the clause.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ConditionalCompilationDirectiveType">
            <summary>
            The various types of conditional compilation directives.
            </summary>
            <subcategory>token</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConditionalCompilationDirectiveType.If">
            <summary>
            An if directive.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConditionalCompilationDirectiveType.Elif">
            <summary>
            An elif directive.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConditionalCompilationDirectiveType.Else">
            <summary>
            An else directive.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ConditionalCompilationDirectiveType.Endif">
            <summary>
            An endif directive.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ReturnStatement">
            <summary>
            A return-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ReturnStatement.returnValue">
            <summary>
            The return value expression, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ReturnStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the ReturnStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="returnValue">The return value expression, if there is one.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ReturnStatement.ReturnValue">
            <summary>
            Gets the return value expression, if there is one.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.UnsafeStatement">
            <summary>
            An unsafe-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.UnsafeStatement.embeddedStatement">
            <summary>
            The block embedded to the unsafe-statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.UnsafeStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.BlockStatement)">
            <summary>
            Initializes a new instance of the UnsafeStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="embeddedStatement">The statement embedded within this try-statement.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.UnsafeStatement.EmbeddedStatement">
            <summary>
            Gets the statement embedded within this unsafe-statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.VariableDeclarationExpression">
            <summary>
            An expression declaring a new variable.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.VariableDeclarationExpression.type">
            <summary>
            The type of the variable being declared.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.VariableDeclarationExpression.declarators">
            <summary>
            The list of declarators.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableDeclarationExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.LiteralExpression,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.VariableDeclaratorExpression})">
            <summary>
            Initializes a new instance of the VariableDeclarationExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="type">The type of the variable or variables being declared.</param>
            <param name="declarators">The list of declarators in the expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.VariableDeclarationExpression.Type">
            <summary>
            Gets the type of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.VariableDeclarationExpression.Declarators">
            <summary>
            Gets the list of declarators for the expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ExternAliasDirective">
            <summary>
            Describes the contents of an extern alias directive.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ExternAliasDirective.identifier">
            <summary>
            The identifier name of the alias.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ExternAliasDirective.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.Declaration,System.Boolean)">
            <summary>
            Initializes a new instance of the ExternAliasDirective class.
            </summary>
            <param name="document">The document that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ExternAliasDirective.Initialize">
            <summary>
            Initializes the element.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ExternAliasDirective.Identifier">
            <summary>
            Gets the identifier of the alias.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Class">
            <summary>
            Describes a class element.
            </summary>
            <subcategory>element</subcategory>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Class.#ctor(Microsoft.StyleCop.CSharp.CsDocument,Microsoft.StyleCop.CSharp.CsElement,Microsoft.StyleCop.CSharp.XmlHeader,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Attribute},Microsoft.StyleCop.CSharp.Declaration,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.TypeParameterConstraintClause},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Class class.
            </summary>
            <param name="document">The document that contains the element.</param>
            <param name="parent">The parent of the element.</param>
            <param name="header">The Xml header for this element.</param>
            <param name="attributes">The list of attributes attached to this element.</param>
            <param name="declaration">The declaration code for this element.</param>
            <param name="typeConstraints">The list of type constraints on the class, if any.</param>
            <param name="unsafeCode">Indicates whether the element resides within a block of unsafe code.</param>
            <param name="generated">Indicates whether the code element was generated or written by hand.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Class.Initialize">
            <summary>
            Initializes the class object.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.VariableCollection">
            <summary>
            A collection of variables for an element or code scope.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.VariableCollection.emptyVariableArray">
            <summary>
            An empty array of variables.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.VariableCollection.emptyVariableArrayEnumerator">
            <summary>
            Adapts the enumerator for the empty variable array to a generic type enumerator.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.VariableCollection.variables">
            <summary>
            The variable collection.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableCollection.#ctor">
            <summary>
            Initializes a new instance of the VariableCollection class.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableCollection.Contains(System.String)">
            <summary>
            Determines whether a variable with the given name is contained within the collection.
            </summary>
            <param name="name">The name of the variable.</param>
            <returns>Returns true if the item is contained within the collection.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableCollection.CopyTo(Microsoft.StyleCop.CSharp.Variable[],System.Int32)">
            <summary>
            Copies the variable to the given array.
            </summary>
            <param name="array">The array to copy the variables into.</param>
            <param name="arrayIndex">The index in the array at which to begin copying.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableCollection.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the variables in the collection.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableCollection.GetVariable(System.String)">
            <summary>
            Gets the variable with the given name.
            </summary>
            <param name="name">The name of the variable to get.</param>
            <returns>Returns the variable.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableCollection.System#Collections#Generic#ICollection{Microsoft#StyleCop#CSharp#Variable}#Add(Microsoft.StyleCop.CSharp.Variable)">
            <summary>
            Adds the given variable.
            </summary>
            <param name="variable">The variable to add.</param>
            <remarks>This method is not supported.</remarks>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableCollection.System#Collections#Generic#ICollection{Microsoft#StyleCop#CSharp#Variable}#Remove(Microsoft.StyleCop.CSharp.Variable)">
            <summary>
            Removes the given variable.
            </summary>
            <param name="variable">The variable to remove.</param>
            <returns>Returns true if the item was removed from the collection.</returns>
            <remarks>This method is not supported.</remarks>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableCollection.System#Collections#Generic#ICollection{Microsoft#StyleCop#CSharp#Variable}#Clear">
            <summary>
            Clears the contents of the collection.
            </summary>
            <remarks>This method is not supported.</remarks>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableCollection.System#Collections#Generic#ICollection{Microsoft#StyleCop#CSharp#Variable}#Contains(Microsoft.StyleCop.CSharp.Variable)">
            <summary>
            Determines whether the given variable is contained within the collection.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Returns true if the item is contained within the collection.</returns>
            <remarks>This method is not supported.</remarks>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the variables in the collection.
            </summary>
            <returns>Gets the enumerator.</returns>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableCollection.Add(Microsoft.StyleCop.CSharp.Variable)">
            <summary>
            Adds a variable to the collection.
            </summary>
            <param name="variable">The variable to add.</param>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.VariableCollection.AddRange(System.Collections.Generic.IEnumerable{Microsoft.StyleCop.CSharp.Variable})">
            <summary>
            Adds a range of variables to the collection.
            </summary>
            <param name="items">The variables to add.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.VariableCollection.Count">
            <summary>
            Gets the number of variables in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.VariableCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.VariableCollection.Item(System.String)">
            <summary>
            Gets the variable with the given name.
            </summary>
            <param name="name">The name of the variable to get.</param>
            <returns>Returns the variable.</returns>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.DoWhileStatement">
            <summary>
            A do-while-statement.
            </summary>
            <subcategory>statement</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.DoWhileStatement.embeddedStatement">
            <summary>
            The statement that is embedded within this do-while-statement.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.DoWhileStatement.conditionExpression">
            <summary>
            The expression within the while statement.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.DoWhileStatement.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Statement)">
            <summary>
            Initializes a new instance of the DoWhileStatement class.
            </summary>
            <param name="tokens">The list of tokens that form the statement.</param>
            <param name="conditionExpression">The expression within the while statement.</param>
            <param name="embeddedStatement">The statement that is embedded within this do-while-statement.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.DoWhileStatement.ConditionalExpression">
            <summary>
            Gets the expression within the while statement.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.DoWhileStatement.EmbeddedStatement">
            <summary>
            Gets the statement that is embedded within this do-while-statement.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.SizeofExpression">
            <summary>
            An expression representing a sizeof operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.SizeofExpression.type">
            <summary>
            The type to get the size of.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.SizeofExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the SizeofExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="type">The type to get the size of.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.SizeofExpression.Type">
            <summary>
            Gets the type to get the size of.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.NewExpression">
            <summary>
            An expression representing a new allocation operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.NewExpression.typeCreationExpression">
            <summary>
            The type creation expression.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.NewExpression.initializerExpression">
            <summary>
            The optional initializer expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.NewExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CSharp.Expression)">
            <summary>
            Initializes a new instance of the NewExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="typeCreationExpression">The type creation expression, or null
            for an anonymous type.</param>
            <param name="initializerExpression">The optional initializer expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.NewExpression.TypeCreationExpression">
            <summary>
            Gets the type creation expression.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.NewExpression.InitializerExpression">
            <summary>
            Gets the optional initializer expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.NewArrayExpression">
            <summary>
            An expression representing a new array allocation operation.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.NewArrayExpression.type">
            <summary>
            The type of the array.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.NewArrayExpression.initializer">
            <summary>
            The type creation expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.NewArrayExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,Microsoft.StyleCop.CSharp.ArrayAccessExpression,Microsoft.StyleCop.CSharp.ArrayInitializerExpression)">
            <summary>
            Initializes a new instance of the NewArrayExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="type">The array type.</param>
            <param name="initializer">The array initializer expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.NewArrayExpression.Type">
            <summary>
            Gets the array type.
            </summary>
            <remarks>The type will be null if this instance represents the creation of an implicitly typed array.</remarks>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.NewArrayExpression.Initializer">
            <summary>
            Gets the array initializer expression, if there is one.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.ArrayInitializerExpression">
            <summary>
            An expression initializing a new array initialization.
            </summary>
            <subcategory>expression</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.ArrayInitializerExpression.initializers">
            <summary>
            The list of variable initializers within the array initializer expression.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.ArrayInitializerExpression.#ctor(Microsoft.StyleCop.CSharp.CsTokenList,System.Collections.Generic.ICollection{Microsoft.StyleCop.CSharp.Expression})">
            <summary>
            Initializes a new instance of the ArrayInitializerExpression class.
            </summary>
            <param name="tokens">The list of tokens that form the expression.</param>
            <param name="initializers">The list of variable initializers within the 
            array initializer expression.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.ArrayInitializerExpression.Initializers">
            <summary>
            Gets the list of variable initializers within the array initializer expression.
            </summary>
        </member>
        <member name="T:Microsoft.StyleCop.CSharp.Argument">
            <summary>
            Describes an argument passed to a method, constructor, indexer, etc.
            </summary>
            <subcategory>other</subcategory>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Argument.location">
            <summary>
            The location of the argument.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Argument.name">
            <summary>
            The optional argument name.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Argument.parent">
            <summary>
            The parent code part.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Argument.modifiers">
            <summary>
            The argument modifiers, if any.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Argument.argumentExpression">
            <summary>
            The expression that forms the body of the argument.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Argument.tokens">
            <summary>
            The tokens that make up the argument.
            </summary>
        </member>
        <member name="F:Microsoft.StyleCop.CSharp.Argument.generated">
            <summary>
            Indicates whether the argument is located within a block of generated code.
            </summary>
        </member>
        <member name="M:Microsoft.StyleCop.CSharp.Argument.#ctor(Microsoft.StyleCop.CSharp.CsToken,Microsoft.StyleCop.CSharp.ParameterModifiers,Microsoft.StyleCop.CSharp.Expression,Microsoft.StyleCop.CodeLocation,Microsoft.StyleCop.CSharp.Reference{Microsoft.StyleCop.CSharp.ICodePart},Microsoft.StyleCop.CSharp.CsTokenList,System.Boolean)">
            <summary>
            Initializes a new instance of the Argument class.
            </summary>
            <param name="name">The optional name of the argument.</param>
            <param name="modifiers">Modifers applied to this argument.</param>
            <param name="argumentExpression">The expression that forms the body of the argument.</param>
            <param name="location">The location of the argument in the code.</param>
            <param name="parent">The parent code part.</param>
            <param name="tokens">The tokens that form the argument.</param>
            <param name="generated">Indicates whether the argument is located within a block of generated code.</param>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Argument.Name">
            <summary>
            Gets the optional argument name.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Argument.Parent">
            <summary>
            Gets the parent of the argument.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Argument.CodePartType">
            <summary>
            Gets the type of this code part.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Argument.Modifiers">
            <summary>
            Gets the modifiers applied to this argument.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Argument.Expression">
            <summary>
            Gets the expression that forms the body of the argument.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Argument.Location">
            <summary>
            Gets the location of the argument in the code.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Argument.LineNumber">
            <summary>
            Gets the line number that the argument appears on in the code.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Argument.Tokens">
            <summary>
            Gets the tokens that form the argument.
            </summary>
        </member>
        <member name="P:Microsoft.StyleCop.CSharp.Argument.Generated">
            <summary>
            Gets a value indicating whether the argument is located within a block of generated code.
            </summary>
        </member>
    </members>
</doc>
